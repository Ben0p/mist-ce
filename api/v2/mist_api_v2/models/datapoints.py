# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from mist_api_v2.models.base_model_ import Model
from mist_api_v2.models.datapoints_data import DatapointsData
from mist_api_v2 import util

from mist_api_v2.models.datapoints_data import DatapointsData  # noqa: E501

class Datapoints(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, status=None, data=None):  # noqa: E501
        """Datapoints - a model defined in OpenAPI

        :param status: The status of this Datapoints.  # noqa: E501
        :type status: str
        :param data: The data of this Datapoints.  # noqa: E501
        :type data: DatapointsData
        """
        self.openapi_types = {
            'status': str,
            'data': DatapointsData
        }

        self.attribute_map = {
            'status': 'status',
            'data': 'data'
        }

        self._status = status
        self._data = data

    @classmethod
    def from_dict(cls, dikt) -> 'Datapoints':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Datapoints of this Datapoints.  # noqa: E501
        :rtype: Datapoints
        """
        return util.deserialize_model(dikt, cls)

    @property
    def status(self):
        """Gets the status of this Datapoints.


        :return: The status of this Datapoints.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Datapoints.


        :param status: The status of this Datapoints.
        :type status: str
        """

        self._status = status

    @property
    def data(self):
        """Gets the data of this Datapoints.


        :return: The data of this Datapoints.
        :rtype: DatapointsData
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this Datapoints.


        :param data: The data of this Datapoints.
        :type data: DatapointsData
        """

        self._data = data
