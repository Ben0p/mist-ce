# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from mist_api_v2.models.base_model_ import Model
from mist_api_v2.models.log import Log
from mist_api_v2 import util

from mist_api_v2.models.log import Log  # noqa: E501

class Job(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, logs=None, error=None, started_at=None, finished_at=None, org=None, machine_id=None, job_id=None, cloud_id=None, action=None, user=None):  # noqa: E501
        """Job - a model defined in OpenAPI

        :param logs: The logs of this Job.  # noqa: E501
        :type logs: List[Log]
        :param error: The error of this Job.  # noqa: E501
        :type error: bool
        :param started_at: The started_at of this Job.  # noqa: E501
        :type started_at: float
        :param finished_at: The finished_at of this Job.  # noqa: E501
        :type finished_at: float
        :param org: The org of this Job.  # noqa: E501
        :type org: str
        :param machine_id: The machine_id of this Job.  # noqa: E501
        :type machine_id: str
        :param job_id: The job_id of this Job.  # noqa: E501
        :type job_id: str
        :param cloud_id: The cloud_id of this Job.  # noqa: E501
        :type cloud_id: str
        :param action: The action of this Job.  # noqa: E501
        :type action: str
        :param user: The user of this Job.  # noqa: E501
        :type user: str
        """
        self.openapi_types = {
            'logs': List[Log],
            'error': bool,
            'started_at': float,
            'finished_at': float,
            'org': str,
            'machine_id': str,
            'job_id': str,
            'cloud_id': str,
            'action': str,
            'user': str
        }

        self.attribute_map = {
            'logs': 'logs',
            'error': 'error',
            'started_at': 'started_at',
            'finished_at': 'finished_at',
            'org': 'org',
            'machine_id': 'machine_id',
            'job_id': 'job_id',
            'cloud_id': 'cloud_id',
            'action': 'action',
            'user': 'user'
        }

        self._logs = logs
        self._error = error
        self._started_at = started_at
        self._finished_at = finished_at
        self._org = org
        self._machine_id = machine_id
        self._job_id = job_id
        self._cloud_id = cloud_id
        self._action = action
        self._user = user

    @classmethod
    def from_dict(cls, dikt) -> 'Job':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Job of this Job.  # noqa: E501
        :rtype: Job
        """
        return util.deserialize_model(dikt, cls)

    @property
    def logs(self):
        """Gets the logs of this Job.


        :return: The logs of this Job.
        :rtype: List[Log]
        """
        return self._logs

    @logs.setter
    def logs(self, logs):
        """Sets the logs of this Job.


        :param logs: The logs of this Job.
        :type logs: List[Log]
        """
        if logs is None:
            raise ValueError("Invalid value for `logs`, must not be `None`")  # noqa: E501

        self._logs = logs

    @property
    def error(self):
        """Gets the error of this Job.


        :return: The error of this Job.
        :rtype: bool
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this Job.


        :param error: The error of this Job.
        :type error: bool
        """
        if error is None:
            raise ValueError("Invalid value for `error`, must not be `None`")  # noqa: E501

        self._error = error

    @property
    def started_at(self):
        """Gets the started_at of this Job.


        :return: The started_at of this Job.
        :rtype: float
        """
        return self._started_at

    @started_at.setter
    def started_at(self, started_at):
        """Sets the started_at of this Job.


        :param started_at: The started_at of this Job.
        :type started_at: float
        """
        if started_at is None:
            raise ValueError("Invalid value for `started_at`, must not be `None`")  # noqa: E501

        self._started_at = started_at

    @property
    def finished_at(self):
        """Gets the finished_at of this Job.


        :return: The finished_at of this Job.
        :rtype: float
        """
        return self._finished_at

    @finished_at.setter
    def finished_at(self, finished_at):
        """Sets the finished_at of this Job.


        :param finished_at: The finished_at of this Job.
        :type finished_at: float
        """
        if finished_at is None:
            raise ValueError("Invalid value for `finished_at`, must not be `None`")  # noqa: E501

        self._finished_at = finished_at

    @property
    def org(self):
        """Gets the org of this Job.


        :return: The org of this Job.
        :rtype: str
        """
        return self._org

    @org.setter
    def org(self, org):
        """Sets the org of this Job.


        :param org: The org of this Job.
        :type org: str
        """
        if org is None:
            raise ValueError("Invalid value for `org`, must not be `None`")  # noqa: E501

        self._org = org

    @property
    def machine_id(self):
        """Gets the machine_id of this Job.


        :return: The machine_id of this Job.
        :rtype: str
        """
        return self._machine_id

    @machine_id.setter
    def machine_id(self, machine_id):
        """Sets the machine_id of this Job.


        :param machine_id: The machine_id of this Job.
        :type machine_id: str
        """

        self._machine_id = machine_id

    @property
    def job_id(self):
        """Gets the job_id of this Job.


        :return: The job_id of this Job.
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this Job.


        :param job_id: The job_id of this Job.
        :type job_id: str
        """
        if job_id is None:
            raise ValueError("Invalid value for `job_id`, must not be `None`")  # noqa: E501

        self._job_id = job_id

    @property
    def cloud_id(self):
        """Gets the cloud_id of this Job.


        :return: The cloud_id of this Job.
        :rtype: str
        """
        return self._cloud_id

    @cloud_id.setter
    def cloud_id(self, cloud_id):
        """Sets the cloud_id of this Job.


        :param cloud_id: The cloud_id of this Job.
        :type cloud_id: str
        """

        self._cloud_id = cloud_id

    @property
    def action(self):
        """Gets the action of this Job.


        :return: The action of this Job.
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this Job.


        :param action: The action of this Job.
        :type action: str
        """
        if action is None:
            raise ValueError("Invalid value for `action`, must not be `None`")  # noqa: E501

        self._action = action

    @property
    def user(self):
        """Gets the user of this Job.


        :return: The user of this Job.
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this Job.


        :param user: The user of this Job.
        :type user: str
        """

        self._user = user
