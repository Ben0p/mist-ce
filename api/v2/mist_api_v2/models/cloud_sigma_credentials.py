# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from mist_api_v2.models.base_model_ import Model
from mist_api_v2 import util


class CloudSigmaCredentials(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, username=None, password=None, region=None):  # noqa: E501
        """CloudSigmaCredentials - a model defined in OpenAPI

        :param username: The username of this CloudSigmaCredentials.  # noqa: E501
        :type username: str
        :param password: The password of this CloudSigmaCredentials.  # noqa: E501
        :type password: str
        :param region: The region of this CloudSigmaCredentials.  # noqa: E501
        :type region: str
        """
        self.openapi_types = {
            'username': str,
            'password': str,
            'region': str
        }

        self.attribute_map = {
            'username': 'username',
            'password': 'password',
            'region': 'region'
        }

        self._username = username
        self._password = password
        self._region = region

    @classmethod
    def from_dict(cls, dikt) -> 'CloudSigmaCredentials':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CloudSigmaCredentials of this CloudSigmaCredentials.  # noqa: E501
        :rtype: CloudSigmaCredentials
        """
        return util.deserialize_model(dikt, cls)

    @property
    def username(self):
        """Gets the username of this CloudSigmaCredentials.

        Your CloudSigma username  # noqa: E501

        :return: The username of this CloudSigmaCredentials.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this CloudSigmaCredentials.

        Your CloudSigma username  # noqa: E501

        :param username: The username of this CloudSigmaCredentials.
        :type username: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501

        self._username = username

    @property
    def password(self):
        """Gets the password of this CloudSigmaCredentials.

        Your CloudSigma password  # noqa: E501

        :return: The password of this CloudSigmaCredentials.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this CloudSigmaCredentials.

        Your CloudSigma password  # noqa: E501

        :param password: The password of this CloudSigmaCredentials.
        :type password: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")  # noqa: E501

        self._password = password

    @property
    def region(self):
        """Gets the region of this CloudSigmaCredentials.

        Your CloudSigma region  # noqa: E501

        :return: The region of this CloudSigmaCredentials.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this CloudSigmaCredentials.

        Your CloudSigma region  # noqa: E501

        :param region: The region of this CloudSigmaCredentials.
        :type region: str
        """
        if region is None:
            raise ValueError("Invalid value for `region`, must not be `None`")  # noqa: E501

        self._region = region
