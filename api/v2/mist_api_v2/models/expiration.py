# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from mist_api_v2.models.base_model_ import Model
from mist_api_v2.models.expiration_notify import ExpirationNotify
from mist_api_v2 import util

from mist_api_v2.models.expiration_notify import ExpirationNotify  # noqa: E501

class Expiration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action=None, date=None, notify=None, notify_msg=None):  # noqa: E501
        """Expiration - a model defined in OpenAPI

        :param action: The action of this Expiration.  # noqa: E501
        :type action: str
        :param date: The date of this Expiration.  # noqa: E501
        :type date: datetime
        :param notify: The notify of this Expiration.  # noqa: E501
        :type notify: ExpirationNotify
        :param notify_msg: The notify_msg of this Expiration.  # noqa: E501
        :type notify_msg: str
        """
        self.openapi_types = {
            'action': str,
            'date': datetime,
            'notify': ExpirationNotify,
            'notify_msg': str
        }

        self.attribute_map = {
            'action': 'action',
            'date': 'date',
            'notify': 'notify',
            'notify_msg': 'notify_msg'
        }

        self._action = action
        self._date = date
        self._notify = notify
        self._notify_msg = notify_msg

    @classmethod
    def from_dict(cls, dikt) -> 'Expiration':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Expiration of this Expiration.  # noqa: E501
        :rtype: Expiration
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action(self):
        """Gets the action of this Expiration.


        :return: The action of this Expiration.
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this Expiration.


        :param action: The action of this Expiration.
        :type action: str
        """
        allowed_values = ["stop", "destroy"]  # noqa: E501
        if action not in allowed_values:
            raise ValueError(
                "Invalid value for `action` ({0}), must be one of {1}"
                .format(action, allowed_values)
            )

        self._action = action

    @property
    def date(self):
        """Gets the date of this Expiration.

        When machine should expire, e.g 2021-09-22T18:19:28Z  # noqa: E501

        :return: The date of this Expiration.
        :rtype: datetime
        """
        return self._date

    @date.setter
    def date(self, date):
        """Sets the date of this Expiration.

        When machine should expire, e.g 2021-09-22T18:19:28Z  # noqa: E501

        :param date: The date of this Expiration.
        :type date: datetime
        """
        if date is None:
            raise ValueError("Invalid value for `date`, must not be `None`")  # noqa: E501

        self._date = date

    @property
    def notify(self):
        """Gets the notify of this Expiration.


        :return: The notify of this Expiration.
        :rtype: ExpirationNotify
        """
        return self._notify

    @notify.setter
    def notify(self, notify):
        """Sets the notify of this Expiration.


        :param notify: The notify of this Expiration.
        :type notify: ExpirationNotify
        """

        self._notify = notify

    @property
    def notify_msg(self):
        """Gets the notify_msg of this Expiration.


        :return: The notify_msg of this Expiration.
        :rtype: str
        """
        return self._notify_msg

    @notify_msg.setter
    def notify_msg(self, notify_msg):
        """Sets the notify_msg of this Expiration.


        :param notify_msg: The notify_msg of this Expiration.
        :type notify_msg: str
        """

        self._notify_msg = notify_msg
