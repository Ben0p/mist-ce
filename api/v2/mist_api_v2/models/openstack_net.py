# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from mist_api_v2.models.base_model_ import Model
from mist_api_v2 import util


class OpenstackNet(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, security_groups=None, networks=None, associate_floating_ip=None):  # noqa: E501
        """OpenstackNet - a model defined in OpenAPI

        :param security_groups: The security_groups of this OpenstackNet.  # noqa: E501
        :type security_groups: List[str]
        :param networks: The networks of this OpenstackNet.  # noqa: E501
        :type networks: List[str]
        :param associate_floating_ip: The associate_floating_ip of this OpenstackNet.  # noqa: E501
        :type associate_floating_ip: bool
        """
        self.openapi_types = {
            'security_groups': List[str],
            'networks': List[str],
            'associate_floating_ip': bool
        }

        self.attribute_map = {
            'security_groups': 'security_groups',
            'networks': 'networks',
            'associate_floating_ip': 'associate_floating_ip'
        }

        self._security_groups = security_groups
        self._networks = networks
        self._associate_floating_ip = associate_floating_ip

    @classmethod
    def from_dict(cls, dikt) -> 'OpenstackNet':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The OpenstackNet of this OpenstackNet.  # noqa: E501
        :rtype: OpenstackNet
        """
        return util.deserialize_model(dikt, cls)

    @property
    def security_groups(self):
        """Gets the security_groups of this OpenstackNet.

        Name or Openstack UUID of the security groups to assign to the machine  # noqa: E501

        :return: The security_groups of this OpenstackNet.
        :rtype: List[str]
        """
        return self._security_groups

    @security_groups.setter
    def security_groups(self, security_groups):
        """Sets the security_groups of this OpenstackNet.

        Name or Openstack UUID of the security groups to assign to the machine  # noqa: E501

        :param security_groups: The security_groups of this OpenstackNet.
        :type security_groups: List[str]
        """

        self._security_groups = security_groups

    @property
    def networks(self):
        """Gets the networks of this OpenstackNet.

        Name or ID of the networks to launch the machine into. Required parameter when there are multiple networks defined for the tenant  # noqa: E501

        :return: The networks of this OpenstackNet.
        :rtype: List[str]
        """
        return self._networks

    @networks.setter
    def networks(self, networks):
        """Sets the networks of this OpenstackNet.

        Name or ID of the networks to launch the machine into. Required parameter when there are multiple networks defined for the tenant  # noqa: E501

        :param networks: The networks of this OpenstackNet.
        :type networks: List[str]
        """

        self._networks = networks

    @property
    def associate_floating_ip(self):
        """Gets the associate_floating_ip of this OpenstackNet.

        Assign a floating IP to the machine, defaults to True for Openstack and False for Vexxhost  # noqa: E501

        :return: The associate_floating_ip of this OpenstackNet.
        :rtype: bool
        """
        return self._associate_floating_ip

    @associate_floating_ip.setter
    def associate_floating_ip(self, associate_floating_ip):
        """Sets the associate_floating_ip of this OpenstackNet.

        Assign a floating IP to the machine, defaults to True for Openstack and False for Vexxhost  # noqa: E501

        :param associate_floating_ip: The associate_floating_ip of this OpenstackNet.
        :type associate_floating_ip: bool
        """

        self._associate_floating_ip = associate_floating_ip
