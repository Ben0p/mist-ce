# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from mist_api_v2.models.base_model_ import Model
from mist_api_v2 import util


class EquinixMetalCreateMachineRequestNetIpAddresses(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address_family=None, public=None, cidr=None):  # noqa: E501
        """EquinixMetalCreateMachineRequestNetIpAddresses - a model defined in OpenAPI

        :param address_family: The address_family of this EquinixMetalCreateMachineRequestNetIpAddresses.  # noqa: E501
        :type address_family: int
        :param public: The public of this EquinixMetalCreateMachineRequestNetIpAddresses.  # noqa: E501
        :type public: bool
        :param cidr: The cidr of this EquinixMetalCreateMachineRequestNetIpAddresses.  # noqa: E501
        :type cidr: int
        """
        self.openapi_types = {
            'address_family': int,
            'public': bool,
            'cidr': int
        }

        self.attribute_map = {
            'address_family': 'address_family',
            'public': 'public',
            'cidr': 'cidr'
        }

        self._address_family = address_family
        self._public = public
        self._cidr = cidr

    @classmethod
    def from_dict(cls, dikt) -> 'EquinixMetalCreateMachineRequestNetIpAddresses':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The EquinixMetalCreateMachineRequest_net_ip_addresses of this EquinixMetalCreateMachineRequestNetIpAddresses.  # noqa: E501
        :rtype: EquinixMetalCreateMachineRequestNetIpAddresses
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address_family(self):
        """Gets the address_family of this EquinixMetalCreateMachineRequestNetIpAddresses.

        Address Family for IP Address(IPv4, IPv6)  # noqa: E501

        :return: The address_family of this EquinixMetalCreateMachineRequestNetIpAddresses.
        :rtype: int
        """
        return self._address_family

    @address_family.setter
    def address_family(self, address_family):
        """Sets the address_family of this EquinixMetalCreateMachineRequestNetIpAddresses.

        Address Family for IP Address(IPv4, IPv6)  # noqa: E501

        :param address_family: The address_family of this EquinixMetalCreateMachineRequestNetIpAddresses.
        :type address_family: int
        """
        allowed_values = [4, 6]  # noqa: E501
        if address_family not in allowed_values:
            raise ValueError(
                "Invalid value for `address_family` ({0}), must be one of {1}"
                .format(address_family, allowed_values)
            )

        self._address_family = address_family

    @property
    def public(self):
        """Gets the public of this EquinixMetalCreateMachineRequestNetIpAddresses.

        Address Type for IP Address  # noqa: E501

        :return: The public of this EquinixMetalCreateMachineRequestNetIpAddresses.
        :rtype: bool
        """
        return self._public

    @public.setter
    def public(self, public):
        """Sets the public of this EquinixMetalCreateMachineRequestNetIpAddresses.

        Address Type for IP Address  # noqa: E501

        :param public: The public of this EquinixMetalCreateMachineRequestNetIpAddresses.
        :type public: bool
        """
        if public is None:
            raise ValueError("Invalid value for `public`, must not be `None`")  # noqa: E501

        self._public = public

    @property
    def cidr(self):
        """Gets the cidr of this EquinixMetalCreateMachineRequestNetIpAddresses.

        Cidr Size for the IP Block created. Valid values depend on the operating system being provisioned. (28..32 for IPv4 addresses, 124..127 for IPv6 addresses)  # noqa: E501

        :return: The cidr of this EquinixMetalCreateMachineRequestNetIpAddresses.
        :rtype: int
        """
        return self._cidr

    @cidr.setter
    def cidr(self, cidr):
        """Sets the cidr of this EquinixMetalCreateMachineRequestNetIpAddresses.

        Cidr Size for the IP Block created. Valid values depend on the operating system being provisioned. (28..32 for IPv4 addresses, 124..127 for IPv6 addresses)  # noqa: E501

        :param cidr: The cidr of this EquinixMetalCreateMachineRequestNetIpAddresses.
        :type cidr: int
        """
        if cidr is None:
            raise ValueError("Invalid value for `cidr`, must not be `None`")  # noqa: E501

        self._cidr = cidr
