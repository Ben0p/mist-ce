# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from mist_api_v2.models.base_model_ import Model
from mist_api_v2.models.cluster_providers import ClusterProviders
from mist_api_v2.models.create_cluster_request_all_of_nodepools import CreateClusterRequestAllOfNodepools
from mist_api_v2.models.create_cluster_request_all_of_waiters import CreateClusterRequestAllOfWaiters
from mist_api_v2.models.helm_chart import HelmChart
from mist_api_v2.models.kubernetes_manifest import KubernetesManifest
from mist_api_v2 import util

from mist_api_v2.models.cluster_providers import ClusterProviders  # noqa: E501
from mist_api_v2.models.create_cluster_request_all_of_nodepools import CreateClusterRequestAllOfNodepools  # noqa: E501
from mist_api_v2.models.create_cluster_request_all_of_waiters import CreateClusterRequestAllOfWaiters  # noqa: E501
from mist_api_v2.models.helm_chart import HelmChart  # noqa: E501
from mist_api_v2.models.kubernetes_manifest import KubernetesManifest  # noqa: E501

class CreateClusterRequestAllOf(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name=None, cloud=None, provider=None, location=None, nodepools=None, templates=None, waiters=None):  # noqa: E501
        """CreateClusterRequestAllOf - a model defined in OpenAPI

        :param name: The name of this CreateClusterRequestAllOf.  # noqa: E501
        :type name: str
        :param cloud: The cloud of this CreateClusterRequestAllOf.  # noqa: E501
        :type cloud: str
        :param provider: The provider of this CreateClusterRequestAllOf.  # noqa: E501
        :type provider: ClusterProviders
        :param location: The location of this CreateClusterRequestAllOf.  # noqa: E501
        :type location: str
        :param nodepools: The nodepools of this CreateClusterRequestAllOf.  # noqa: E501
        :type nodepools: List[CreateClusterRequestAllOfNodepools]
        :param templates: The templates of this CreateClusterRequestAllOf.  # noqa: E501
        :type templates: List[object]
        :param waiters: The waiters of this CreateClusterRequestAllOf.  # noqa: E501
        :type waiters: List[CreateClusterRequestAllOfWaiters]
        """
        self.openapi_types = {
            'name': str,
            'cloud': str,
            'provider': ClusterProviders,
            'location': str,
            'nodepools': List[CreateClusterRequestAllOfNodepools],
            'templates': List[object],
            'waiters': List[CreateClusterRequestAllOfWaiters]
        }

        self.attribute_map = {
            'name': 'name',
            'cloud': 'cloud',
            'provider': 'provider',
            'location': 'location',
            'nodepools': 'nodepools',
            'templates': 'templates',
            'waiters': 'waiters'
        }

        self._name = name
        self._cloud = cloud
        self._provider = provider
        self._location = location
        self._nodepools = nodepools
        self._templates = templates
        self._waiters = waiters

    @classmethod
    def from_dict(cls, dikt) -> 'CreateClusterRequestAllOf':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CreateClusterRequest_allOf of this CreateClusterRequestAllOf.  # noqa: E501
        :rtype: CreateClusterRequestAllOf
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this CreateClusterRequestAllOf.

        The name of the cluster to create  # noqa: E501

        :return: The name of this CreateClusterRequestAllOf.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateClusterRequestAllOf.

        The name of the cluster to create  # noqa: E501

        :param name: The name of this CreateClusterRequestAllOf.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def cloud(self):
        """Gets the cloud of this CreateClusterRequestAllOf.

        The cloud the cluster belongs to  # noqa: E501

        :return: The cloud of this CreateClusterRequestAllOf.
        :rtype: str
        """
        return self._cloud

    @cloud.setter
    def cloud(self, cloud):
        """Sets the cloud of this CreateClusterRequestAllOf.

        The cloud the cluster belongs to  # noqa: E501

        :param cloud: The cloud of this CreateClusterRequestAllOf.
        :type cloud: str
        """

        self._cloud = cloud

    @property
    def provider(self):
        """Gets the provider of this CreateClusterRequestAllOf.


        :return: The provider of this CreateClusterRequestAllOf.
        :rtype: ClusterProviders
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this CreateClusterRequestAllOf.


        :param provider: The provider of this CreateClusterRequestAllOf.
        :type provider: ClusterProviders
        """

        self._provider = provider

    @property
    def location(self):
        """Gets the location of this CreateClusterRequestAllOf.

        Google specific parameter(Required).Name or ID of the location to create the cluster in  # noqa: E501

        :return: The location of this CreateClusterRequestAllOf.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this CreateClusterRequestAllOf.

        Google specific parameter(Required).Name or ID of the location to create the cluster in  # noqa: E501

        :param location: The location of this CreateClusterRequestAllOf.
        :type location: str
        """

        self._location = location

    @property
    def nodepools(self):
        """Gets the nodepools of this CreateClusterRequestAllOf.


        :return: The nodepools of this CreateClusterRequestAllOf.
        :rtype: List[CreateClusterRequestAllOfNodepools]
        """
        return self._nodepools

    @nodepools.setter
    def nodepools(self, nodepools):
        """Sets the nodepools of this CreateClusterRequestAllOf.


        :param nodepools: The nodepools of this CreateClusterRequestAllOf.
        :type nodepools: List[CreateClusterRequestAllOfNodepools]
        """

        self._nodepools = nodepools

    @property
    def templates(self):
        """Gets the templates of this CreateClusterRequestAllOf.


        :return: The templates of this CreateClusterRequestAllOf.
        :rtype: List[object]
        """
        return self._templates

    @templates.setter
    def templates(self, templates):
        """Sets the templates of this CreateClusterRequestAllOf.


        :param templates: The templates of this CreateClusterRequestAllOf.
        :type templates: List[object]
        """

        self._templates = templates

    @property
    def waiters(self):
        """Gets the waiters of this CreateClusterRequestAllOf.


        :return: The waiters of this CreateClusterRequestAllOf.
        :rtype: List[CreateClusterRequestAllOfWaiters]
        """
        return self._waiters

    @waiters.setter
    def waiters(self, waiters):
        """Sets the waiters of this CreateClusterRequestAllOf.


        :param waiters: The waiters of this CreateClusterRequestAllOf.
        :type waiters: List[CreateClusterRequestAllOfWaiters]
        """

        self._waiters = waiters
