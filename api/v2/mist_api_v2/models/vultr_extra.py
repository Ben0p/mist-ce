# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from mist_api_v2.models.base_model_ import Model
from mist_api_v2 import util


class VultrExtra(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, backups=None, ddos_protection=None):  # noqa: E501
        """VultrExtra - a model defined in OpenAPI

        :param backups: The backups of this VultrExtra.  # noqa: E501
        :type backups: bool
        :param ddos_protection: The ddos_protection of this VultrExtra.  # noqa: E501
        :type ddos_protection: bool
        """
        self.openapi_types = {
            'backups': bool,
            'ddos_protection': bool
        }

        self.attribute_map = {
            'backups': 'backups',
            'ddos_protection': 'ddos_protection'
        }

        self._backups = backups
        self._ddos_protection = ddos_protection

    @classmethod
    def from_dict(cls, dikt) -> 'VultrExtra':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The VultrExtra of this VultrExtra.  # noqa: E501
        :rtype: VultrExtra
        """
        return util.deserialize_model(dikt, cls)

    @property
    def backups(self):
        """Gets the backups of this VultrExtra.

        Enable automatic backups for the machine, invalid for \"Bare Metal\" & \"Dedicated Cloud\" size types. There is an additional charge depending on the size selected  # noqa: E501

        :return: The backups of this VultrExtra.
        :rtype: bool
        """
        return self._backups

    @backups.setter
    def backups(self, backups):
        """Sets the backups of this VultrExtra.

        Enable automatic backups for the machine, invalid for \"Bare Metal\" & \"Dedicated Cloud\" size types. There is an additional charge depending on the size selected  # noqa: E501

        :param backups: The backups of this VultrExtra.
        :type backups: bool
        """

        self._backups = backups

    @property
    def ddos_protection(self):
        """Gets the ddos_protection of this VultrExtra.

        Enable DDoS protection, invalid for \"Bare Metal\" size type. There is an additional charge depending on the type of the size selected  # noqa: E501

        :return: The ddos_protection of this VultrExtra.
        :rtype: bool
        """
        return self._ddos_protection

    @ddos_protection.setter
    def ddos_protection(self, ddos_protection):
        """Sets the ddos_protection of this VultrExtra.

        Enable DDoS protection, invalid for \"Bare Metal\" size type. There is an additional charge depending on the type of the size selected  # noqa: E501

        :param ddos_protection: The ddos_protection of this VultrExtra.
        :type ddos_protection: bool
        """

        self._ddos_protection = ddos_protection
