# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from mist_api_v2.models.base_model_ import Model
from mist_api_v2.models.member import Member
from mist_api_v2 import util

from mist_api_v2.models.member import Member  # noqa: E501

class Team(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, name=None, members=None, members_count=None, description=None, policy=None):  # noqa: E501
        """Team - a model defined in OpenAPI

        :param id: The id of this Team.  # noqa: E501
        :type id: str
        :param name: The name of this Team.  # noqa: E501
        :type name: str
        :param members: The members of this Team.  # noqa: E501
        :type members: List[Member]
        :param members_count: The members_count of this Team.  # noqa: E501
        :type members_count: str
        :param description: The description of this Team.  # noqa: E501
        :type description: str
        :param policy: The policy of this Team.  # noqa: E501
        :type policy: object
        """
        self.openapi_types = {
            'id': str,
            'name': str,
            'members': List[Member],
            'members_count': str,
            'description': str,
            'policy': object
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'members': 'members',
            'members_count': 'members_count',
            'description': 'description',
            'policy': 'policy'
        }

        self._id = id
        self._name = name
        self._members = members
        self._members_count = members_count
        self._description = description
        self._policy = policy

    @classmethod
    def from_dict(cls, dikt) -> 'Team':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Team of this Team.  # noqa: E501
        :rtype: Team
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Team.


        :return: The id of this Team.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Team.


        :param id: The id of this Team.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Team.


        :return: The name of this Team.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Team.


        :param name: The name of this Team.
        :type name: str
        """

        self._name = name

    @property
    def members(self):
        """Gets the members of this Team.


        :return: The members of this Team.
        :rtype: List[Member]
        """
        return self._members

    @members.setter
    def members(self, members):
        """Sets the members of this Team.


        :param members: The members of this Team.
        :type members: List[Member]
        """

        self._members = members

    @property
    def members_count(self):
        """Gets the members_count of this Team.


        :return: The members_count of this Team.
        :rtype: str
        """
        return self._members_count

    @members_count.setter
    def members_count(self, members_count):
        """Sets the members_count of this Team.


        :param members_count: The members_count of this Team.
        :type members_count: str
        """

        self._members_count = members_count

    @property
    def description(self):
        """Gets the description of this Team.


        :return: The description of this Team.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Team.


        :param description: The description of this Team.
        :type description: str
        """

        self._description = description

    @property
    def policy(self):
        """Gets the policy of this Team.


        :return: The policy of this Team.
        :rtype: object
        """
        return self._policy

    @policy.setter
    def policy(self, policy):
        """Sets the policy of this Team.


        :param policy: The policy of this Team.
        :type policy: object
        """

        self._policy = policy
