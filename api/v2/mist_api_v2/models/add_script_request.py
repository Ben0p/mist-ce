# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from mist_api_v2.models.base_model_ import Model
from mist_api_v2 import util


class AddScriptRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name=None, script=None, location_type=None, entrypoint=None, exec_type=None, description=None):  # noqa: E501
        """AddScriptRequest - a model defined in OpenAPI

        :param name: The name of this AddScriptRequest.  # noqa: E501
        :type name: str
        :param script: The script of this AddScriptRequest.  # noqa: E501
        :type script: str
        :param location_type: The location_type of this AddScriptRequest.  # noqa: E501
        :type location_type: str
        :param entrypoint: The entrypoint of this AddScriptRequest.  # noqa: E501
        :type entrypoint: str
        :param exec_type: The exec_type of this AddScriptRequest.  # noqa: E501
        :type exec_type: str
        :param description: The description of this AddScriptRequest.  # noqa: E501
        :type description: str
        """
        self.openapi_types = {
            'name': str,
            'script': str,
            'location_type': str,
            'entrypoint': str,
            'exec_type': str,
            'description': str
        }

        self.attribute_map = {
            'name': 'name',
            'script': 'script',
            'location_type': 'location_type',
            'entrypoint': 'entrypoint',
            'exec_type': 'exec_type',
            'description': 'description'
        }

        self._name = name
        self._script = script
        self._location_type = location_type
        self._entrypoint = entrypoint
        self._exec_type = exec_type
        self._description = description

    @classmethod
    def from_dict(cls, dikt) -> 'AddScriptRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AddScriptRequest of this AddScriptRequest.  # noqa: E501
        :rtype: AddScriptRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this AddScriptRequest.


        :return: The name of this AddScriptRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AddScriptRequest.


        :param name: The name of this AddScriptRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def script(self):
        """Gets the script of this AddScriptRequest.


        :return: The script of this AddScriptRequest.
        :rtype: str
        """
        return self._script

    @script.setter
    def script(self, script):
        """Sets the script of this AddScriptRequest.


        :param script: The script of this AddScriptRequest.
        :type script: str
        """
        if script is None:
            raise ValueError("Invalid value for `script`, must not be `None`")  # noqa: E501

        self._script = script

    @property
    def location_type(self):
        """Gets the location_type of this AddScriptRequest.


        :return: The location_type of this AddScriptRequest.
        :rtype: str
        """
        return self._location_type

    @location_type.setter
    def location_type(self, location_type):
        """Sets the location_type of this AddScriptRequest.


        :param location_type: The location_type of this AddScriptRequest.
        :type location_type: str
        """
        allowed_values = ["inline", "github", "url"]  # noqa: E501
        if location_type not in allowed_values:
            raise ValueError(
                "Invalid value for `location_type` ({0}), must be one of {1}"
                .format(location_type, allowed_values)
            )

        self._location_type = location_type

    @property
    def entrypoint(self):
        """Gets the entrypoint of this AddScriptRequest.


        :return: The entrypoint of this AddScriptRequest.
        :rtype: str
        """
        return self._entrypoint

    @entrypoint.setter
    def entrypoint(self, entrypoint):
        """Sets the entrypoint of this AddScriptRequest.


        :param entrypoint: The entrypoint of this AddScriptRequest.
        :type entrypoint: str
        """

        self._entrypoint = entrypoint

    @property
    def exec_type(self):
        """Gets the exec_type of this AddScriptRequest.


        :return: The exec_type of this AddScriptRequest.
        :rtype: str
        """
        return self._exec_type

    @exec_type.setter
    def exec_type(self, exec_type):
        """Sets the exec_type of this AddScriptRequest.


        :param exec_type: The exec_type of this AddScriptRequest.
        :type exec_type: str
        """
        allowed_values = ["executable", "ansible"]  # noqa: E501
        if exec_type not in allowed_values:
            raise ValueError(
                "Invalid value for `exec_type` ({0}), must be one of {1}"
                .format(exec_type, allowed_values)
            )

        self._exec_type = exec_type

    @property
    def description(self):
        """Gets the description of this AddScriptRequest.


        :return: The description of this AddScriptRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AddScriptRequest.


        :param description: The description of this AddScriptRequest.
        :type description: str
        """

        self._description = description
