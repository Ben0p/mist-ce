# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from mist_api_v2.models.base_model_ import Model
from mist_api_v2.models.external_vault_all_of import ExternalVaultAllOf
from mist_api_v2 import util

from mist_api_v2.models.external_vault_all_of import ExternalVaultAllOf  # noqa: E501

class ExternalVault(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address=None, secrets_engine_path=None, auth_method=None, role_id=None, secret_id=None, token=None):  # noqa: E501
        """ExternalVault - a model defined in OpenAPI

        :param address: The address of this ExternalVault.  # noqa: E501
        :type address: str
        :param secrets_engine_path: The secrets_engine_path of this ExternalVault.  # noqa: E501
        :type secrets_engine_path: str
        :param auth_method: The auth_method of this ExternalVault.  # noqa: E501
        :type auth_method: str
        :param role_id: The role_id of this ExternalVault.  # noqa: E501
        :type role_id: str
        :param secret_id: The secret_id of this ExternalVault.  # noqa: E501
        :type secret_id: str
        :param token: The token of this ExternalVault.  # noqa: E501
        :type token: str
        """
        self.openapi_types = {
            'address': str,
            'secrets_engine_path': str,
            'auth_method': str,
            'role_id': str,
            'secret_id': str,
            'token': str
        }

        self.attribute_map = {
            'address': 'address',
            'secrets_engine_path': 'secrets_engine_path',
            'auth_method': 'auth_method',
            'role_id': 'role_id',
            'secret_id': 'secret_id',
            'token': 'token'
        }

        self._address = address
        self._secrets_engine_path = secrets_engine_path
        self._auth_method = auth_method
        self._role_id = role_id
        self._secret_id = secret_id
        self._token = token

    @classmethod
    def from_dict(cls, dikt) -> 'ExternalVault':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ExternalVault of this ExternalVault.  # noqa: E501
        :rtype: ExternalVault
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this ExternalVault.

        The URL of your Hashicorp Vault instance  # noqa: E501

        :return: The address of this ExternalVault.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this ExternalVault.

        The URL of your Hashicorp Vault instance  # noqa: E501

        :param address: The address of this ExternalVault.
        :type address: str
        """

        self._address = address

    @property
    def secrets_engine_path(self):
        """Gets the secrets_engine_path of this ExternalVault.

        Vault secrets engine path  # noqa: E501

        :return: The secrets_engine_path of this ExternalVault.
        :rtype: str
        """
        return self._secrets_engine_path

    @secrets_engine_path.setter
    def secrets_engine_path(self, secrets_engine_path):
        """Sets the secrets_engine_path of this ExternalVault.

        Vault secrets engine path  # noqa: E501

        :param secrets_engine_path: The secrets_engine_path of this ExternalVault.
        :type secrets_engine_path: str
        """

        self._secrets_engine_path = secrets_engine_path

    @property
    def auth_method(self):
        """Gets the auth_method of this ExternalVault.


        :return: The auth_method of this ExternalVault.
        :rtype: str
        """
        return self._auth_method

    @auth_method.setter
    def auth_method(self, auth_method):
        """Sets the auth_method of this ExternalVault.


        :param auth_method: The auth_method of this ExternalVault.
        :type auth_method: str
        """
        allowed_values = ["AppRole", "Token"]  # noqa: E501
        if auth_method not in allowed_values:
            raise ValueError(
                "Invalid value for `auth_method` ({0}), must be one of {1}"
                .format(auth_method, allowed_values)
            )

        self._auth_method = auth_method

    @property
    def role_id(self):
        """Gets the role_id of this ExternalVault.

        The Vault RoleID to use for approle authentication. Either token or both role_id and secret_id must be specified  # noqa: E501

        :return: The role_id of this ExternalVault.
        :rtype: str
        """
        return self._role_id

    @role_id.setter
    def role_id(self, role_id):
        """Sets the role_id of this ExternalVault.

        The Vault RoleID to use for approle authentication. Either token or both role_id and secret_id must be specified  # noqa: E501

        :param role_id: The role_id of this ExternalVault.
        :type role_id: str
        """

        self._role_id = role_id

    @property
    def secret_id(self):
        """Gets the secret_id of this ExternalVault.

        The Vault SecretID to use for approle authentication. Either token or both role_id and secret_id must be specified  # noqa: E501

        :return: The secret_id of this ExternalVault.
        :rtype: str
        """
        return self._secret_id

    @secret_id.setter
    def secret_id(self, secret_id):
        """Sets the secret_id of this ExternalVault.

        The Vault SecretID to use for approle authentication. Either token or both role_id and secret_id must be specified  # noqa: E501

        :param secret_id: The secret_id of this ExternalVault.
        :type secret_id: str
        """

        self._secret_id = secret_id

    @property
    def token(self):
        """Gets the token of this ExternalVault.

        The Vault token that will be used to authenticate against the new Vault. Either token or both role_id and secret_id must be specified  # noqa: E501

        :return: The token of this ExternalVault.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this ExternalVault.

        The Vault token that will be used to authenticate against the new Vault. Either token or both role_id and secret_id must be specified  # noqa: E501

        :param token: The token of this ExternalVault.
        :type token: str
        """

        self._token = token
