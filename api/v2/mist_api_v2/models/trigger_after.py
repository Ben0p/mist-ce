# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from mist_api_v2.models.base_model_ import Model
from mist_api_v2 import util


class TriggerAfter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, offset=None, period=None):  # noqa: E501
        """TriggerAfter - a model defined in OpenAPI

        :param offset: The offset of this TriggerAfter.  # noqa: E501
        :type offset: int
        :param period: The period of this TriggerAfter.  # noqa: E501
        :type period: str
        """
        self.openapi_types = {
            'offset': int,
            'period': str
        }

        self.attribute_map = {
            'offset': 'offset',
            'period': 'period'
        }

        self._offset = offset
        self._period = period

    @classmethod
    def from_dict(cls, dikt) -> 'TriggerAfter':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The TriggerAfter of this TriggerAfter.  # noqa: E501
        :rtype: TriggerAfter
        """
        return util.deserialize_model(dikt, cls)

    @property
    def offset(self):
        """Gets the offset of this TriggerAfter.

        a positive integer denoting the tolerance period  # noqa: E501

        :return: The offset of this TriggerAfter.
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this TriggerAfter.

        a positive integer denoting the tolerance period  # noqa: E501

        :param offset: The offset of this TriggerAfter.
        :type offset: int
        """
        if offset is None:
            raise ValueError("Invalid value for `offset`, must not be `None`")  # noqa: E501

        self._offset = offset

    @property
    def period(self):
        """Gets the period of this TriggerAfter.

        units of time, e.g. \"seconds\"  # noqa: E501

        :return: The period of this TriggerAfter.
        :rtype: str
        """
        return self._period

    @period.setter
    def period(self, period):
        """Sets the period of this TriggerAfter.

        units of time, e.g. \"seconds\"  # noqa: E501

        :param period: The period of this TriggerAfter.
        :type period: str
        """
        if period is None:
            raise ValueError("Invalid value for `period`, must not be `None`")  # noqa: E501

        self._period = period
