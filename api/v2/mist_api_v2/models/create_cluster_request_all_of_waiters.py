# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from mist_api_v2.models.base_model_ import Model
from mist_api_v2 import util


class CreateClusterRequestAllOfWaiters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name=None, type=None, namespace='default', timeout=1800):  # noqa: E501
        """CreateClusterRequestAllOfWaiters - a model defined in OpenAPI

        :param name: The name of this CreateClusterRequestAllOfWaiters.  # noqa: E501
        :type name: str
        :param type: The type of this CreateClusterRequestAllOfWaiters.  # noqa: E501
        :type type: str
        :param namespace: The namespace of this CreateClusterRequestAllOfWaiters.  # noqa: E501
        :type namespace: str
        :param timeout: The timeout of this CreateClusterRequestAllOfWaiters.  # noqa: E501
        :type timeout: int
        """
        self.openapi_types = {
            'name': str,
            'type': str,
            'namespace': str,
            'timeout': int
        }

        self.attribute_map = {
            'name': 'name',
            'type': 'type',
            'namespace': 'namespace',
            'timeout': 'timeout'
        }

        self._name = name
        self._type = type
        self._namespace = namespace
        self._timeout = timeout

    @classmethod
    def from_dict(cls, dikt) -> 'CreateClusterRequestAllOfWaiters':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CreateClusterRequest_allOf_waiters of this CreateClusterRequestAllOfWaiters.  # noqa: E501
        :rtype: CreateClusterRequestAllOfWaiters
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this CreateClusterRequestAllOfWaiters.


        :return: The name of this CreateClusterRequestAllOfWaiters.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateClusterRequestAllOfWaiters.


        :param name: The name of this CreateClusterRequestAllOfWaiters.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def type(self):
        """Gets the type of this CreateClusterRequestAllOfWaiters.


        :return: The type of this CreateClusterRequestAllOfWaiters.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CreateClusterRequestAllOfWaiters.


        :param type: The type of this CreateClusterRequestAllOfWaiters.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def namespace(self):
        """Gets the namespace of this CreateClusterRequestAllOfWaiters.


        :return: The namespace of this CreateClusterRequestAllOfWaiters.
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this CreateClusterRequestAllOfWaiters.


        :param namespace: The namespace of this CreateClusterRequestAllOfWaiters.
        :type namespace: str
        """

        self._namespace = namespace

    @property
    def timeout(self):
        """Gets the timeout of this CreateClusterRequestAllOfWaiters.


        :return: The timeout of this CreateClusterRequestAllOfWaiters.
        :rtype: int
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this CreateClusterRequestAllOfWaiters.


        :param timeout: The timeout of this CreateClusterRequestAllOfWaiters.
        :type timeout: int
        """

        self._timeout = timeout
