# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from mist_api_v2.models.base_model_ import Model
from mist_api_v2.models.datapoints_values_item import DatapointsValuesItem
from mist_api_v2.models.instant_vector import InstantVector
from mist_api_v2.models.range_vector import RangeVector
from mist_api_v2 import util

from mist_api_v2.models.datapoints_values_item import DatapointsValuesItem  # noqa: E501
from mist_api_v2.models.instant_vector import InstantVector  # noqa: E501
from mist_api_v2.models.range_vector import RangeVector  # noqa: E501

class Vector(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, metric=None, values=None, value=None):  # noqa: E501
        """Vector - a model defined in OpenAPI

        :param metric: The metric of this Vector.  # noqa: E501
        :type metric: object
        :param values: The values of this Vector.  # noqa: E501
        :type values: List[DatapointsValuesItem]
        :param value: The value of this Vector.  # noqa: E501
        :type value: List[List]
        """
        self.openapi_types = {
            'metric': object,
            'values': List[DatapointsValuesItem],
            'value': List[List]
        }

        self.attribute_map = {
            'metric': 'metric',
            'values': 'values',
            'value': 'value'
        }

        self._metric = metric
        self._values = values
        self._value = value

    @classmethod
    def from_dict(cls, dikt) -> 'Vector':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Vector of this Vector.  # noqa: E501
        :rtype: Vector
        """
        return util.deserialize_model(dikt, cls)

    @property
    def metric(self):
        """Gets the metric of this Vector.


        :return: The metric of this Vector.
        :rtype: object
        """
        return self._metric

    @metric.setter
    def metric(self, metric):
        """Sets the metric of this Vector.


        :param metric: The metric of this Vector.
        :type metric: object
        """

        self._metric = metric

    @property
    def values(self):
        """Gets the values of this Vector.


        :return: The values of this Vector.
        :rtype: List[DatapointsValuesItem]
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this Vector.


        :param values: The values of this Vector.
        :type values: List[DatapointsValuesItem]
        """

        self._values = values

    @property
    def value(self):
        """Gets the value of this Vector.


        :return: The value of this Vector.
        :rtype: List[List]
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Vector.


        :param value: The value of this Vector.
        :type value: List[List]
        """

        self._value = value
