# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from mist_api_v2.models.base_model_ import Model
from mist_api_v2 import util


class WebHookAction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action_type=None, method=None, url=None, query_string_params=None, data=None, json=None, headers=None):  # noqa: E501
        """WebHookAction - a model defined in OpenAPI

        :param action_type: The action_type of this WebHookAction.  # noqa: E501
        :type action_type: str
        :param method: The method of this WebHookAction.  # noqa: E501
        :type method: str
        :param url: The url of this WebHookAction.  # noqa: E501
        :type url: str
        :param query_string_params: The query_string_params of this WebHookAction.  # noqa: E501
        :type query_string_params: str
        :param data: The data of this WebHookAction.  # noqa: E501
        :type data: str
        :param json: The json of this WebHookAction.  # noqa: E501
        :type json: str
        :param headers: The headers of this WebHookAction.  # noqa: E501
        :type headers: str
        """
        self.openapi_types = {
            'action_type': str,
            'method': str,
            'url': str,
            'query_string_params': str,
            'data': str,
            'json': str,
            'headers': str
        }

        self.attribute_map = {
            'action_type': 'action_type',
            'method': 'method',
            'url': 'url',
            'query_string_params': 'query_string_params',
            'data': 'data',
            'json': 'json',
            'headers': 'headers'
        }

        self._action_type = action_type
        self._method = method
        self._url = url
        self._query_string_params = query_string_params
        self._data = data
        self._json = json
        self._headers = headers

    @classmethod
    def from_dict(cls, dikt) -> 'WebHookAction':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The WebHookAction of this WebHookAction.  # noqa: E501
        :rtype: WebHookAction
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action_type(self):
        """Gets the action_type of this WebHookAction.


        :return: The action_type of this WebHookAction.
        :rtype: str
        """
        return self._action_type

    @action_type.setter
    def action_type(self, action_type):
        """Sets the action_type of this WebHookAction.


        :param action_type: The action_type of this WebHookAction.
        :type action_type: str
        """
        allowed_values = ["webhook"]  # noqa: E501
        if action_type not in allowed_values:
            raise ValueError(
                "Invalid value for `action_type` ({0}), must be one of {1}"
                .format(action_type, allowed_values)
            )

        self._action_type = action_type

    @property
    def method(self):
        """Gets the method of this WebHookAction.

        the HTTP method to be executed by the webhook  # noqa: E501

        :return: The method of this WebHookAction.
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this WebHookAction.

        the HTTP method to be executed by the webhook  # noqa: E501

        :param method: The method of this WebHookAction.
        :type method: str
        """
        allowed_values = ["post", "delete", "put", "patch"]  # noqa: E501
        if method not in allowed_values:
            raise ValueError(
                "Invalid value for `method` ({0}), must be one of {1}"
                .format(method, allowed_values)
            )

        self._method = method

    @property
    def url(self):
        """Gets the url of this WebHookAction.

        the URL of the endpoint that is called by the webhook  # noqa: E501

        :return: The url of this WebHookAction.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this WebHookAction.

        the URL of the endpoint that is called by the webhook  # noqa: E501

        :param url: The url of this WebHookAction.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501

        self._url = url

    @property
    def query_string_params(self):
        """Gets the query_string_params of this WebHookAction.

        the query string parameters of the HTTP request  # noqa: E501

        :return: The query_string_params of this WebHookAction.
        :rtype: str
        """
        return self._query_string_params

    @query_string_params.setter
    def query_string_params(self, query_string_params):
        """Sets the query_string_params of this WebHookAction.

        the query string parameters of the HTTP request  # noqa: E501

        :param query_string_params: The query_string_params of this WebHookAction.
        :type query_string_params: str
        """

        self._query_string_params = query_string_params

    @property
    def data(self):
        """Gets the data of this WebHookAction.

        the body of the HTTP request  # noqa: E501

        :return: The data of this WebHookAction.
        :rtype: str
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this WebHookAction.

        the body of the HTTP request  # noqa: E501

        :param data: The data of this WebHookAction.
        :type data: str
        """

        self._data = data

    @property
    def json(self):
        """Gets the json of this WebHookAction.

        the JSON body of the HTTP request  # noqa: E501

        :return: The json of this WebHookAction.
        :rtype: str
        """
        return self._json

    @json.setter
    def json(self, json):
        """Sets the json of this WebHookAction.

        the JSON body of the HTTP request  # noqa: E501

        :param json: The json of this WebHookAction.
        :type json: str
        """

        self._json = json

    @property
    def headers(self):
        """Gets the headers of this WebHookAction.

        the HTTP headers of the request  # noqa: E501

        :return: The headers of this WebHookAction.
        :rtype: str
        """
        return self._headers

    @headers.setter
    def headers(self, headers):
        """Sets the headers of this WebHookAction.

        the HTTP headers of the request  # noqa: E501

        :param headers: The headers of this WebHookAction.
        :type headers: str
        """

        self._headers = headers
