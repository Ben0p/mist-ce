# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from mist_api_v2.models.base_model_ import Model
from mist_api_v2 import util


class AppRoleAuth(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, role_id=None, secret_id=None):  # noqa: E501
        """AppRoleAuth - a model defined in OpenAPI

        :param role_id: The role_id of this AppRoleAuth.  # noqa: E501
        :type role_id: str
        :param secret_id: The secret_id of this AppRoleAuth.  # noqa: E501
        :type secret_id: str
        """
        self.openapi_types = {
            'role_id': str,
            'secret_id': str
        }

        self.attribute_map = {
            'role_id': 'role_id',
            'secret_id': 'secret_id'
        }

        self._role_id = role_id
        self._secret_id = secret_id

    @classmethod
    def from_dict(cls, dikt) -> 'AppRoleAuth':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AppRoleAuth of this AppRoleAuth.  # noqa: E501
        :rtype: AppRoleAuth
        """
        return util.deserialize_model(dikt, cls)

    @property
    def role_id(self):
        """Gets the role_id of this AppRoleAuth.

        The Vault RoleID to use for approle authentication. Either token or both role_id and secret_id must be specified  # noqa: E501

        :return: The role_id of this AppRoleAuth.
        :rtype: str
        """
        return self._role_id

    @role_id.setter
    def role_id(self, role_id):
        """Sets the role_id of this AppRoleAuth.

        The Vault RoleID to use for approle authentication. Either token or both role_id and secret_id must be specified  # noqa: E501

        :param role_id: The role_id of this AppRoleAuth.
        :type role_id: str
        """

        self._role_id = role_id

    @property
    def secret_id(self):
        """Gets the secret_id of this AppRoleAuth.

        The Vault SecretID to use for approle authentication. Either token or both role_id and secret_id must be specified  # noqa: E501

        :return: The secret_id of this AppRoleAuth.
        :rtype: str
        """
        return self._secret_id

    @secret_id.setter
    def secret_id(self, secret_id):
        """Sets the secret_id of this AppRoleAuth.

        The Vault SecretID to use for approle authentication. Either token or both role_id and secret_id must be specified  # noqa: E501

        :param secret_id: The secret_id of this AppRoleAuth.
        :type secret_id: str
        """

        self._secret_id = secret_id
