# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from mist_api_v2.models.base_model_ import Model
from mist_api_v2 import util


class G8Credentials(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, url=None, user_id=None, apikey=None):  # noqa: E501
        """G8Credentials - a model defined in OpenAPI

        :param url: The url of this G8Credentials.  # noqa: E501
        :type url: str
        :param user_id: The user_id of this G8Credentials.  # noqa: E501
        :type user_id: str
        :param apikey: The apikey of this G8Credentials.  # noqa: E501
        :type apikey: str
        """
        self.openapi_types = {
            'url': str,
            'user_id': str,
            'apikey': str
        }

        self.attribute_map = {
            'url': 'url',
            'user_id': 'userId',
            'apikey': 'apikey'
        }

        self._url = url
        self._user_id = user_id
        self._apikey = apikey

    @classmethod
    def from_dict(cls, dikt) -> 'G8Credentials':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The G8Credentials of this G8Credentials.  # noqa: E501
        :rtype: G8Credentials
        """
        return util.deserialize_model(dikt, cls)

    @property
    def url(self):
        """Gets the url of this G8Credentials.


        :return: The url of this G8Credentials.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this G8Credentials.


        :param url: The url of this G8Credentials.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501

        self._url = url

    @property
    def user_id(self):
        """Gets the user_id of this G8Credentials.


        :return: The user_id of this G8Credentials.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this G8Credentials.


        :param user_id: The user_id of this G8Credentials.
        :type user_id: str
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    @property
    def apikey(self):
        """Gets the apikey of this G8Credentials.


        :return: The apikey of this G8Credentials.
        :rtype: str
        """
        return self._apikey

    @apikey.setter
    def apikey(self, apikey):
        """Sets the apikey of this G8Credentials.


        :param apikey: The apikey of this G8Credentials.
        :type apikey: str
        """
        if apikey is None:
            raise ValueError("Invalid value for `apikey`, must not be `None`")  # noqa: E501

        self._apikey = apikey
