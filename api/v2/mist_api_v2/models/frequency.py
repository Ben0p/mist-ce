# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from mist_api_v2.models.base_model_ import Model
from mist_api_v2 import util


class Frequency(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, every=None, period=None):  # noqa: E501
        """Frequency - a model defined in OpenAPI

        :param every: The every of this Frequency.  # noqa: E501
        :type every: int
        :param period: The period of this Frequency.  # noqa: E501
        :type period: str
        """
        self.openapi_types = {
            'every': int,
            'period': str
        }

        self.attribute_map = {
            'every': 'every',
            'period': 'period'
        }

        self._every = every
        self._period = period

    @classmethod
    def from_dict(cls, dikt) -> 'Frequency':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Frequency of this Frequency.  # noqa: E501
        :rtype: Frequency
        """
        return util.deserialize_model(dikt, cls)

    @property
    def every(self):
        """Gets the every of this Frequency.

        a positive integer denoting how often the rule must be evaluated   # noqa: E501

        :return: The every of this Frequency.
        :rtype: int
        """
        return self._every

    @every.setter
    def every(self, every):
        """Sets the every of this Frequency.

        a positive integer denoting how often the rule must be evaluated   # noqa: E501

        :param every: The every of this Frequency.
        :type every: int
        """
        if every is None:
            raise ValueError("Invalid value for `every`, must not be `None`")  # noqa: E501

        self._every = every

    @property
    def period(self):
        """Gets the period of this Frequency.

        units of time, e.g. \"seconds\"  # noqa: E501

        :return: The period of this Frequency.
        :rtype: str
        """
        return self._period

    @period.setter
    def period(self, period):
        """Sets the period of this Frequency.

        units of time, e.g. \"seconds\"  # noqa: E501

        :param period: The period of this Frequency.
        :type period: str
        """
        if period is None:
            raise ValueError("Invalid value for `period`, must not be `None`")  # noqa: E501

        self._period = period
