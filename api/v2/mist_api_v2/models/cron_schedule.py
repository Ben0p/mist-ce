# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from mist_api_v2.models.base_model_ import Model
from mist_api_v2 import util


class CronSchedule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, minute=None, hour=None, day_of_month=None, month_of_year=None, day_of_week=None, max_run_count=None):  # noqa: E501
        """CronSchedule - a model defined in OpenAPI

        :param minute: The minute of this CronSchedule.  # noqa: E501
        :type minute: str
        :param hour: The hour of this CronSchedule.  # noqa: E501
        :type hour: str
        :param day_of_month: The day_of_month of this CronSchedule.  # noqa: E501
        :type day_of_month: str
        :param month_of_year: The month_of_year of this CronSchedule.  # noqa: E501
        :type month_of_year: str
        :param day_of_week: The day_of_week of this CronSchedule.  # noqa: E501
        :type day_of_week: str
        :param max_run_count: The max_run_count of this CronSchedule.  # noqa: E501
        :type max_run_count: int
        """
        self.openapi_types = {
            'minute': str,
            'hour': str,
            'day_of_month': str,
            'month_of_year': str,
            'day_of_week': str,
            'max_run_count': int
        }

        self.attribute_map = {
            'minute': 'minute',
            'hour': 'hour',
            'day_of_month': 'day_of_month',
            'month_of_year': 'month_of_year',
            'day_of_week': 'day_of_week',
            'max_run_count': 'max_run_count'
        }

        self._minute = minute
        self._hour = hour
        self._day_of_month = day_of_month
        self._month_of_year = month_of_year
        self._day_of_week = day_of_week
        self._max_run_count = max_run_count

    @classmethod
    def from_dict(cls, dikt) -> 'CronSchedule':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CronSchedule of this CronSchedule.  # noqa: E501
        :rtype: CronSchedule
        """
        return util.deserialize_model(dikt, cls)

    @property
    def minute(self):
        """Gets the minute of this CronSchedule.


        :return: The minute of this CronSchedule.
        :rtype: str
        """
        return self._minute

    @minute.setter
    def minute(self, minute):
        """Sets the minute of this CronSchedule.


        :param minute: The minute of this CronSchedule.
        :type minute: str
        """
        if minute is None:
            raise ValueError("Invalid value for `minute`, must not be `None`")  # noqa: E501

        self._minute = minute

    @property
    def hour(self):
        """Gets the hour of this CronSchedule.


        :return: The hour of this CronSchedule.
        :rtype: str
        """
        return self._hour

    @hour.setter
    def hour(self, hour):
        """Sets the hour of this CronSchedule.


        :param hour: The hour of this CronSchedule.
        :type hour: str
        """
        if hour is None:
            raise ValueError("Invalid value for `hour`, must not be `None`")  # noqa: E501

        self._hour = hour

    @property
    def day_of_month(self):
        """Gets the day_of_month of this CronSchedule.


        :return: The day_of_month of this CronSchedule.
        :rtype: str
        """
        return self._day_of_month

    @day_of_month.setter
    def day_of_month(self, day_of_month):
        """Sets the day_of_month of this CronSchedule.


        :param day_of_month: The day_of_month of this CronSchedule.
        :type day_of_month: str
        """
        if day_of_month is None:
            raise ValueError("Invalid value for `day_of_month`, must not be `None`")  # noqa: E501

        self._day_of_month = day_of_month

    @property
    def month_of_year(self):
        """Gets the month_of_year of this CronSchedule.


        :return: The month_of_year of this CronSchedule.
        :rtype: str
        """
        return self._month_of_year

    @month_of_year.setter
    def month_of_year(self, month_of_year):
        """Sets the month_of_year of this CronSchedule.


        :param month_of_year: The month_of_year of this CronSchedule.
        :type month_of_year: str
        """
        if month_of_year is None:
            raise ValueError("Invalid value for `month_of_year`, must not be `None`")  # noqa: E501

        self._month_of_year = month_of_year

    @property
    def day_of_week(self):
        """Gets the day_of_week of this CronSchedule.


        :return: The day_of_week of this CronSchedule.
        :rtype: str
        """
        return self._day_of_week

    @day_of_week.setter
    def day_of_week(self, day_of_week):
        """Sets the day_of_week of this CronSchedule.


        :param day_of_week: The day_of_week of this CronSchedule.
        :type day_of_week: str
        """
        if day_of_week is None:
            raise ValueError("Invalid value for `day_of_week`, must not be `None`")  # noqa: E501

        self._day_of_week = day_of_week

    @property
    def max_run_count(self):
        """Gets the max_run_count of this CronSchedule.


        :return: The max_run_count of this CronSchedule.
        :rtype: int
        """
        return self._max_run_count

    @max_run_count.setter
    def max_run_count(self, max_run_count):
        """Sets the max_run_count of this CronSchedule.


        :param max_run_count: The max_run_count of this CronSchedule.
        :type max_run_count: int
        """
        if max_run_count is not None and max_run_count < 1:  # noqa: E501
            raise ValueError("Invalid value for `max_run_count`, must be a value greater than or equal to `1`")  # noqa: E501

        self._max_run_count = max_run_count
