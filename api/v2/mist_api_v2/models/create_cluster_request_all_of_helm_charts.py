# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from mist_api_v2.models.base_model_ import Model
from mist_api_v2 import util


class CreateClusterRequestAllOfHelmCharts(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, repo_url=None, chart_name=None, release_name=None, namespace=None, values=None, version=None):  # noqa: E501
        """CreateClusterRequestAllOfHelmCharts - a model defined in OpenAPI

        :param repo_url: The repo_url of this CreateClusterRequestAllOfHelmCharts.  # noqa: E501
        :type repo_url: str
        :param chart_name: The chart_name of this CreateClusterRequestAllOfHelmCharts.  # noqa: E501
        :type chart_name: str
        :param release_name: The release_name of this CreateClusterRequestAllOfHelmCharts.  # noqa: E501
        :type release_name: str
        :param namespace: The namespace of this CreateClusterRequestAllOfHelmCharts.  # noqa: E501
        :type namespace: str
        :param values: The values of this CreateClusterRequestAllOfHelmCharts.  # noqa: E501
        :type values: str
        :param version: The version of this CreateClusterRequestAllOfHelmCharts.  # noqa: E501
        :type version: str
        """
        self.openapi_types = {
            'repo_url': str,
            'chart_name': str,
            'release_name': str,
            'namespace': str,
            'values': str,
            'version': str
        }

        self.attribute_map = {
            'repo_url': 'repo_url',
            'chart_name': 'chart_name',
            'release_name': 'release_name',
            'namespace': 'namespace',
            'values': 'values',
            'version': 'version'
        }

        self._repo_url = repo_url
        self._chart_name = chart_name
        self._release_name = release_name
        self._namespace = namespace
        self._values = values
        self._version = version

    @classmethod
    def from_dict(cls, dikt) -> 'CreateClusterRequestAllOfHelmCharts':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CreateClusterRequest_allOf_helm_charts of this CreateClusterRequestAllOfHelmCharts.  # noqa: E501
        :rtype: CreateClusterRequestAllOfHelmCharts
        """
        return util.deserialize_model(dikt, cls)

    @property
    def repo_url(self):
        """Gets the repo_url of this CreateClusterRequestAllOfHelmCharts.

        The url of the Helm repository  # noqa: E501

        :return: The repo_url of this CreateClusterRequestAllOfHelmCharts.
        :rtype: str
        """
        return self._repo_url

    @repo_url.setter
    def repo_url(self, repo_url):
        """Sets the repo_url of this CreateClusterRequestAllOfHelmCharts.

        The url of the Helm repository  # noqa: E501

        :param repo_url: The repo_url of this CreateClusterRequestAllOfHelmCharts.
        :type repo_url: str
        """
        if repo_url is None:
            raise ValueError("Invalid value for `repo_url`, must not be `None`")  # noqa: E501

        self._repo_url = repo_url

    @property
    def chart_name(self):
        """Gets the chart_name of this CreateClusterRequestAllOfHelmCharts.


        :return: The chart_name of this CreateClusterRequestAllOfHelmCharts.
        :rtype: str
        """
        return self._chart_name

    @chart_name.setter
    def chart_name(self, chart_name):
        """Sets the chart_name of this CreateClusterRequestAllOfHelmCharts.


        :param chart_name: The chart_name of this CreateClusterRequestAllOfHelmCharts.
        :type chart_name: str
        """
        if chart_name is None:
            raise ValueError("Invalid value for `chart_name`, must not be `None`")  # noqa: E501

        self._chart_name = chart_name

    @property
    def release_name(self):
        """Gets the release_name of this CreateClusterRequestAllOfHelmCharts.


        :return: The release_name of this CreateClusterRequestAllOfHelmCharts.
        :rtype: str
        """
        return self._release_name

    @release_name.setter
    def release_name(self, release_name):
        """Sets the release_name of this CreateClusterRequestAllOfHelmCharts.


        :param release_name: The release_name of this CreateClusterRequestAllOfHelmCharts.
        :type release_name: str
        """
        if release_name is None:
            raise ValueError("Invalid value for `release_name`, must not be `None`")  # noqa: E501

        self._release_name = release_name

    @property
    def namespace(self):
        """Gets the namespace of this CreateClusterRequestAllOfHelmCharts.

        The namespace to install the release on  # noqa: E501

        :return: The namespace of this CreateClusterRequestAllOfHelmCharts.
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this CreateClusterRequestAllOfHelmCharts.

        The namespace to install the release on  # noqa: E501

        :param namespace: The namespace of this CreateClusterRequestAllOfHelmCharts.
        :type namespace: str
        """

        self._namespace = namespace

    @property
    def values(self):
        """Gets the values of this CreateClusterRequestAllOfHelmCharts.

        The contents of a Helm values.yaml file  # noqa: E501

        :return: The values of this CreateClusterRequestAllOfHelmCharts.
        :rtype: str
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this CreateClusterRequestAllOfHelmCharts.

        The contents of a Helm values.yaml file  # noqa: E501

        :param values: The values of this CreateClusterRequestAllOfHelmCharts.
        :type values: str
        """

        self._values = values

    @property
    def version(self):
        """Gets the version of this CreateClusterRequestAllOfHelmCharts.

        A version constraint for the chart  # noqa: E501

        :return: The version of this CreateClusterRequestAllOfHelmCharts.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this CreateClusterRequestAllOfHelmCharts.

        A version constraint for the chart  # noqa: E501

        :param version: The version of this CreateClusterRequestAllOfHelmCharts.
        :type version: str
        """

        self._version = version
