# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from mist_api_v2.models.base_model_ import Model
from mist_api_v2 import util


class OpenshiftCredentials(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, host=None, port=None, username=None, password=None):  # noqa: E501
        """OpenshiftCredentials - a model defined in OpenAPI

        :param host: The host of this OpenshiftCredentials.  # noqa: E501
        :type host: str
        :param port: The port of this OpenshiftCredentials.  # noqa: E501
        :type port: str
        :param username: The username of this OpenshiftCredentials.  # noqa: E501
        :type username: str
        :param password: The password of this OpenshiftCredentials.  # noqa: E501
        :type password: str
        """
        self.openapi_types = {
            'host': str,
            'port': str,
            'username': str,
            'password': str
        }

        self.attribute_map = {
            'host': 'host',
            'port': 'port',
            'username': 'username',
            'password': 'password'
        }

        self._host = host
        self._port = port
        self._username = username
        self._password = password

    @classmethod
    def from_dict(cls, dikt) -> 'OpenshiftCredentials':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The OpenshiftCredentials of this OpenshiftCredentials.  # noqa: E501
        :rtype: OpenshiftCredentials
        """
        return util.deserialize_model(dikt, cls)

    @property
    def host(self):
        """Gets the host of this OpenshiftCredentials.

        Your OpenShift API host  # noqa: E501

        :return: The host of this OpenshiftCredentials.
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this OpenshiftCredentials.

        Your OpenShift API host  # noqa: E501

        :param host: The host of this OpenshiftCredentials.
        :type host: str
        """
        if host is None:
            raise ValueError("Invalid value for `host`, must not be `None`")  # noqa: E501

        self._host = host

    @property
    def port(self):
        """Gets the port of this OpenshiftCredentials.

        Your OpenShift API port  # noqa: E501

        :return: The port of this OpenshiftCredentials.
        :rtype: str
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this OpenshiftCredentials.

        Your OpenShift API port  # noqa: E501

        :param port: The port of this OpenshiftCredentials.
        :type port: str
        """
        if port is None:
            raise ValueError("Invalid value for `port`, must not be `None`")  # noqa: E501

        self._port = port

    @property
    def username(self):
        """Gets the username of this OpenshiftCredentials.

        Your OpenShift API username  # noqa: E501

        :return: The username of this OpenshiftCredentials.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this OpenshiftCredentials.

        Your OpenShift API username  # noqa: E501

        :param username: The username of this OpenshiftCredentials.
        :type username: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501

        self._username = username

    @property
    def password(self):
        """Gets the password of this OpenshiftCredentials.

        Your OpenShift API password  # noqa: E501

        :return: The password of this OpenshiftCredentials.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this OpenshiftCredentials.

        Your OpenShift API password  # noqa: E501

        :param password: The password of this OpenshiftCredentials.
        :type password: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")  # noqa: E501

        self._password = password
