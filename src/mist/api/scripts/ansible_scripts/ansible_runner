#!/usr/bin/env python3

"""Execute an Ansible Script.
This executable takes care of placing ansible hosts, playbook, ssh keys
files and then executes the ansible playbook.
"""

import argparse
import logging
import os
import subprocess
import sys

log = logging.getLogger(__name__)


def main():
    """Create required files and run ansible-playbook"""

    args = parse_args()

    os.mkdir('/ansible')
    os.chdir('/ansible')
    with open('./hosts', 'w') as hosts:
        print(args.ip, file=hosts)
    with open('./playbook.yaml', 'w') as playbook:
        print(args.playbook, file=playbook)
    with open('./id_rsa', 'w') as id_rsa:
        print(args.private_key, file=id_rsa)

    os.environ["ANSIBLE_HOST_KEY_CHECKING"] = "False"

    subprocess.call(
        [
            'ansible-playbook',
            '--private-key', './id_rsa',
            '-i', './hosts',
            '-u', args.user,
            './playbook.yaml',
        ]
    )


def parse_args():
    """Parse command line arguments"""
    parser = argparse.ArgumentParser(
        description='Fetch and run executable script or ansible playbook.',
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )
    parser.add_argument(
        '-i', '--ip', type=str, help='Target Machine Public IP'
    )
    parser.add_argument(
        '-p', '--playbook', type=str, help='Ansible Playbook to run'
    )
    parser.add_argument(
        '-k', '--private_key', type=str, help='Private SSH key of machine'
    )
    parser.add_argument('-u', '--user', type=str, help='SSH key user')
    return parser.parse_args()


if __name__ == '__main__':
    sys.exit(main())
