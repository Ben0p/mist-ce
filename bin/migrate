#!/usr/bin/env python

import os
import sys
import time
import argparse
import mongoengine as me

from mist.api import config
from mist.api.portal.models import Portal


def main():
    # Parse command-line arguments.
    args = parse_args()

    # Wait for mongodb to become responsive.
    wait_mongo(args.mongo_timeout)

    # Get Portal singleton.
    portal = Portal.get_singleton()

    if args.status:
        migrations = portal.get_unapplied_migrations()
        println()
        if migrations:
            println("List of all unapplied migrations:")
            println("\n".join(portal.get_unapplied_migrations()))
        println("Database version is: %d" % portal.database_version)
    else:
        portal.apply_migrations(exit_on_error=True)


def wait_mongo(timeout):
    for _ in xrange(timeout):
        try:
            me.connect(db=config.MONGO_DB, host=config.MONGO_URI)
        except Exception as exc:
            print "MongoDB at %s is not responsive yet.." % config.MONGO_URI
            time.sleep(1)
        else:
            break
    else:
        print "MongoDB did not respond within %s seconds" % timeout
        raise exc


def println(string=""):
    print >> sys.stderr, "%s\n" % string


def parse_args():
    argparser = argparse.ArgumentParser(
        description="Apply database migrations"
    )

    argparser.add_argument(
        "-s", "--status", action="store_true",
        help=("Return a list of all unapplied migrations, if any, as well as "
              "the database's version based on the last applied migration")
    )
    argparser.add_argument(
        "--mongo-timeout", default=os.getenv('MONGO_TIMEOUT', 30), type=int,
        help=("The time to wait for the mongodb instance to become responsive")
    )

    return argparser.parse_args()


if __name__ == '__main__':
    main()
