#!/usr/bin/env python

import fdb
fdb.api_version(610)

import fdb.tuple
import datetime
import random
import sys


def init_db():
    db = fdb.open()
    return db


@fdb.transactional
def set_dummy_metrics_last_hour(tr, machine_id, metrics):
    now = datetime.datetime.now()

    print('Set dummy data, for the last hour:' + str(now.hour))

    for hour in range(now.hour - 1, now.hour + 1): #  inclusive range for last hour
        for minute in range(0, now.minute):
            # set a random metric value per minute
            value = random.uniform(2.533, 4.325)
            for i in range(1, 12):
                # set metric for every 5 second intervals
                seconds = i * 5
                tuple_key = monitoring.pack((machine_id, metrics, now.year,
                                            now.month, now.day, hour,
                                            minute, seconds))
                tr[tuple_key] = fdb.tuple.pack((value,))

def test_get_data(db,machine_id,monitoring):
    tuple_key_start = ('1ce5ef661566433a85580db557b753e6', 'system.load1', '2019', '10', '14', '17', '26', '51')

    tuple_key_stop = ('1ce5ef661566433a85580db557b753e6', 'system.load1', '2019', '10', '14', '17', '48', '56')
    print("yeah")
    key_timestamp_start = monitoring.pack(tuple_key_start)
    key_timestamp_stop = monitoring.pack(tuple_key_stop)
    for k, v in db[key_timestamp_start:key_timestamp_stop]:
        print(fdb.tuple.unpack(k), '=>', fdb.tuple.unpack(v))

@fdb.transactional
def set_dummy_metrics_last_three_hours(tr, machine_id, metric):
    now = datetime.datetime.now()

    #  ten_mins_ago = now - datetime.timedelta(minutes=10)
    three_hours_range = now - datetime.timedelta(hours=3)

    print('Set dummy data, since 3 hours ago:' + str(three_hours_range))
    print('Now hour:' + str(now.hour))
    print('Three hours ago:' + str(now.hour - 3))

    # for the last three hours
    for hour in range(now.hour - 6, now.hour + 1):
        #  get the minute range depending if we're in the actual hour or the previous
        minute_range = []
        if hour == now.hour:
            minute_range = range(0, now.minute)
        else:
            minute_range = range(0, 60)
        
        tuple_key_hour = metrics_per_hour.pack((machine_id, metric,
                                                now.year, now.month,
                                                now.day, hour))
        
        value = random.uniform(50.00, 64.000)
        tr[tuple_key_hour] = fdb.tuple.pack((value,))
            
        for minute in minute_range:
            tuple_key_minute = metrics_per_minute.pack((machine_id, metric,
                                                        now.year, now.month,
                                                        now.day, hour, minute))

            # set a random metric value and the timestamp of the metric
            value = random.uniform(50.00, 64.000)
            tr[tuple_key_minute] = fdb.tuple.pack((value,))

            for i in range(1, 12):
                # set metric for every 5 second intervals
                seconds = i * 5
                tuple_key_second = monitoring.pack((machine_id, metric,
                                                    now.year, now.month,
                                                    now.day, hour,
                                                    minute, seconds))
                tr[tuple_key_second] = fdb.tuple.pack((value,))


@fdb.transactional
def get_dummy_metrics(tr, machine_id, metric):
    print('Fetching dummy data..')
    for k, v in tr[monitoring["available_metrics"].range()]:
        print(fdb.tuple.unpack(k), '=>', fdb.tuple.unpack(v))

"""Usage of the script:
   from the terminal, run:
   >> python init_fdb.py [machine_id] [metrics]
   
   machine_id: The id of the machine that contains the data
   metrics: the type of metric to get/set for this machine 
"""
if __name__ == '__main__':
    print('initializing fdb..')
    print('Command line args >' + str(sys.argv) )
    if len(sys.argv) == 3 :
        #import ipdb;ipdb.set_trace()
        db = init_db()
        monitoring = fdb.directory.create_or_open(db, ('monitoring',))

        machine_id = sys.argv[1]
        metric = sys.argv[2]
        metrics_per_minute = monitoring['metric_per_minute']
        metrics_per_hour = monitoring['metric_per_hour']

        #set_dummy_metrics_last_three_hours(db, machine_id, metric)
        #  set_dummy_metrics_last_hour(db)
        get_dummy_metrics(db, machine_id, metric)
        #test_get_data(db,machine_id,monitoring)
    else:
        print('Usage >> init_fdb.py [machine_id] [metric]')
        
