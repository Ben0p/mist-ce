# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from mist_api_v2.models.base_model_ import Model
from mist_api_v2 import util


class DockerExtraLimits(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cpu=None, memory=None):  # noqa: E501
        """DockerExtraLimits - a model defined in OpenAPI

        :param cpu: The cpu of this DockerExtraLimits.  # noqa: E501
        :type cpu: float
        :param memory: The memory of this DockerExtraLimits.  # noqa: E501
        :type memory: int
        """
        self.openapi_types = {
            'cpu': float,
            'memory': int
        }

        self.attribute_map = {
            'cpu': 'cpu',
            'memory': 'memory'
        }

        self._cpu = cpu
        self._memory = memory

    @classmethod
    def from_dict(cls, dikt) -> 'DockerExtraLimits':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DockerExtra_limits of this DockerExtraLimits.  # noqa: E501
        :rtype: DockerExtraLimits
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cpu(self):
        """Gets the cpu of this DockerExtraLimits.

        The cpu quota. For example with a value of 1.5 the container is guaranteed at most one and a half of the CPUs  # noqa: E501

        :return: The cpu of this DockerExtraLimits.
        :rtype: float
        """
        return self._cpu

    @cpu.setter
    def cpu(self, cpu):
        """Sets the cpu of this DockerExtraLimits.

        The cpu quota. For example with a value of 1.5 the container is guaranteed at most one and a half of the CPUs  # noqa: E501

        :param cpu: The cpu of this DockerExtraLimits.
        :type cpu: float
        """

        self._cpu = cpu

    @property
    def memory(self):
        """Gets the memory of this DockerExtraLimits.

        The memory limit in MBs to apply  # noqa: E501

        :return: The memory of this DockerExtraLimits.
        :rtype: int
        """
        return self._memory

    @memory.setter
    def memory(self, memory):
        """Sets the memory of this DockerExtraLimits.

        The memory limit in MBs to apply  # noqa: E501

        :param memory: The memory of this DockerExtraLimits.
        :type memory: int
        """

        self._memory = memory
