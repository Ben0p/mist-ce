# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from mist_api_v2.models.base_model_ import Model
from mist_api_v2.models.action import Action
from mist_api_v2.models.condition import Condition
from mist_api_v2.models.selector import Selector
from mist_api_v2.models.trigger_after import TriggerAfter
from mist_api_v2.models.when import When
from mist_api_v2 import util

from mist_api_v2.models.action import Action  # noqa: E501
from mist_api_v2.models.condition import Condition  # noqa: E501
from mist_api_v2.models.selector import Selector  # noqa: E501
from mist_api_v2.models.trigger_after import TriggerAfter  # noqa: E501
from mist_api_v2.models.when import When  # noqa: E501

class AddRuleRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name=None, description=None, selectors=None, conditions=None, actions=None, when=None, trigger_after=None):  # noqa: E501
        """AddRuleRequest - a model defined in OpenAPI

        :param name: The name of this AddRuleRequest.  # noqa: E501
        :type name: str
        :param description: The description of this AddRuleRequest.  # noqa: E501
        :type description: str
        :param selectors: The selectors of this AddRuleRequest.  # noqa: E501
        :type selectors: List[Selector]
        :param conditions: The conditions of this AddRuleRequest.  # noqa: E501
        :type conditions: List[Condition]
        :param actions: The actions of this AddRuleRequest.  # noqa: E501
        :type actions: List[Action]
        :param when: The when of this AddRuleRequest.  # noqa: E501
        :type when: When
        :param trigger_after: The trigger_after of this AddRuleRequest.  # noqa: E501
        :type trigger_after: TriggerAfter
        """
        self.openapi_types = {
            'name': str,
            'description': str,
            'selectors': List[Selector],
            'conditions': List[Condition],
            'actions': List[Action],
            'when': When,
            'trigger_after': TriggerAfter
        }

        self.attribute_map = {
            'name': 'name',
            'description': 'description',
            'selectors': 'selectors',
            'conditions': 'conditions',
            'actions': 'actions',
            'when': 'when',
            'trigger_after': 'trigger_after'
        }

        self._name = name
        self._description = description
        self._selectors = selectors
        self._conditions = conditions
        self._actions = actions
        self._when = when
        self._trigger_after = trigger_after

    @classmethod
    def from_dict(cls, dikt) -> 'AddRuleRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AddRuleRequest of this AddRuleRequest.  # noqa: E501
        :rtype: AddRuleRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this AddRuleRequest.

        The name of the rule  # noqa: E501

        :return: The name of this AddRuleRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AddRuleRequest.

        The name of the rule  # noqa: E501

        :param name: The name of this AddRuleRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this AddRuleRequest.

        The description of the rule  # noqa: E501

        :return: The description of this AddRuleRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AddRuleRequest.

        The description of the rule  # noqa: E501

        :param description: The description of this AddRuleRequest.
        :type description: str
        """

        self._description = description

    @property
    def selectors(self):
        """Gets the selectors of this AddRuleRequest.


        :return: The selectors of this AddRuleRequest.
        :rtype: List[Selector]
        """
        return self._selectors

    @selectors.setter
    def selectors(self, selectors):
        """Sets the selectors of this AddRuleRequest.


        :param selectors: The selectors of this AddRuleRequest.
        :type selectors: List[Selector]
        """

        self._selectors = selectors

    @property
    def conditions(self):
        """Gets the conditions of this AddRuleRequest.


        :return: The conditions of this AddRuleRequest.
        :rtype: List[Condition]
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """Sets the conditions of this AddRuleRequest.


        :param conditions: The conditions of this AddRuleRequest.
        :type conditions: List[Condition]
        """
        if conditions is None:
            raise ValueError("Invalid value for `conditions`, must not be `None`")  # noqa: E501

        self._conditions = conditions

    @property
    def actions(self):
        """Gets the actions of this AddRuleRequest.


        :return: The actions of this AddRuleRequest.
        :rtype: List[Action]
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """Sets the actions of this AddRuleRequest.


        :param actions: The actions of this AddRuleRequest.
        :type actions: List[Action]
        """
        if actions is None:
            raise ValueError("Invalid value for `actions`, must not be `None`")  # noqa: E501

        self._actions = actions

    @property
    def when(self):
        """Gets the when of this AddRuleRequest.


        :return: The when of this AddRuleRequest.
        :rtype: When
        """
        return self._when

    @when.setter
    def when(self, when):
        """Sets the when of this AddRuleRequest.


        :param when: The when of this AddRuleRequest.
        :type when: When
        """

        self._when = when

    @property
    def trigger_after(self):
        """Gets the trigger_after of this AddRuleRequest.


        :return: The trigger_after of this AddRuleRequest.
        :rtype: TriggerAfter
        """
        return self._trigger_after

    @trigger_after.setter
    def trigger_after(self, trigger_after):
        """Sets the trigger_after of this AddRuleRequest.


        :param trigger_after: The trigger_after of this AddRuleRequest.
        :type trigger_after: TriggerAfter
        """
        if trigger_after is None:
            raise ValueError("Invalid value for `trigger_after`, must not be `None`")  # noqa: E501

        self._trigger_after = trigger_after
