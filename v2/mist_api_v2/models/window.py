# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from mist_api_v2.models.base_model_ import Model
from mist_api_v2 import util


class Window(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, start=None, stop=0, period=None):  # noqa: E501
        """Window - a model defined in OpenAPI

        :param start: The start of this Window.  # noqa: E501
        :type start: int
        :param stop: The stop of this Window.  # noqa: E501
        :type stop: int
        :param period: The period of this Window.  # noqa: E501
        :type period: str
        """
        self.openapi_types = {
            'start': int,
            'stop': int,
            'period': str
        }

        self.attribute_map = {
            'start': 'start',
            'stop': 'stop',
            'period': 'period'
        }

        self._start = start
        self._stop = stop
        self._period = period

    @classmethod
    def from_dict(cls, dikt) -> 'Window':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Window of this Window.  # noqa: E501
        :rtype: Window
        """
        return util.deserialize_model(dikt, cls)

    @property
    def start(self):
        """Gets the start of this Window.

        a positive integer denoting the start of the search window in terms of \"now() - start\"   # noqa: E501

        :return: The start of this Window.
        :rtype: int
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this Window.

        a positive integer denoting the start of the search window in terms of \"now() - start\"   # noqa: E501

        :param start: The start of this Window.
        :type start: int
        """
        if start is None:
            raise ValueError("Invalid value for `start`, must not be `None`")  # noqa: E501

        self._start = start

    @property
    def stop(self):
        """Gets the stop of this Window.

        a positive integer, where stop < start, denoting the end of the search window. Defaults to now   # noqa: E501

        :return: The stop of this Window.
        :rtype: int
        """
        return self._stop

    @stop.setter
    def stop(self, stop):
        """Sets the stop of this Window.

        a positive integer, where stop < start, denoting the end of the search window. Defaults to now   # noqa: E501

        :param stop: The stop of this Window.
        :type stop: int
        """

        self._stop = stop

    @property
    def period(self):
        """Gets the period of this Window.

        units of time, e.g. \"seconds\"  # noqa: E501

        :return: The period of this Window.
        :rtype: str
        """
        return self._period

    @period.setter
    def period(self, period):
        """Sets the period of this Window.

        units of time, e.g. \"seconds\"  # noqa: E501

        :param period: The period of this Window.
        :type period: str
        """
        if period is None:
            raise ValueError("Invalid value for `period`, must not be `None`")  # noqa: E501

        self._period = period
