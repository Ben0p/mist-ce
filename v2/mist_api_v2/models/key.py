# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from mist_api_v2.models.base_model_ import Model
from mist_api_v2 import util


class Key(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, name=None, config=None, tags=None, created_by=None, owned_by=None, default=None, type=None):  # noqa: E501
        """Key - a model defined in OpenAPI

        :param id: The id of this Key.  # noqa: E501
        :type id: str
        :param name: The name of this Key.  # noqa: E501
        :type name: str
        :param config: The config of this Key.  # noqa: E501
        :type config: object
        :param tags: The tags of this Key.  # noqa: E501
        :type tags: object
        :param created_by: The created_by of this Key.  # noqa: E501
        :type created_by: str
        :param owned_by: The owned_by of this Key.  # noqa: E501
        :type owned_by: str
        :param default: The default of this Key.  # noqa: E501
        :type default: bool
        :param type: The type of this Key.  # noqa: E501
        :type type: str
        """
        self.openapi_types = {
            'id': str,
            'name': str,
            'config': object,
            'tags': object,
            'created_by': str,
            'owned_by': str,
            'default': bool,
            'type': str
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'config': 'config',
            'tags': 'tags',
            'created_by': 'created_by',
            'owned_by': 'owned_by',
            'default': 'default',
            'type': 'type'
        }

        self._id = id
        self._name = name
        self._config = config
        self._tags = tags
        self._created_by = created_by
        self._owned_by = owned_by
        self._default = default
        self._type = type

    @classmethod
    def from_dict(cls, dikt) -> 'Key':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Key of this Key.  # noqa: E501
        :rtype: Key
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Key.


        :return: The id of this Key.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Key.


        :param id: The id of this Key.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Key.


        :return: The name of this Key.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Key.


        :param name: The name of this Key.
        :type name: str
        """

        self._name = name

    @property
    def config(self):
        """Gets the config of this Key.


        :return: The config of this Key.
        :rtype: object
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this Key.


        :param config: The config of this Key.
        :type config: object
        """

        self._config = config

    @property
    def tags(self):
        """Gets the tags of this Key.


        :return: The tags of this Key.
        :rtype: object
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Key.


        :param tags: The tags of this Key.
        :type tags: object
        """

        self._tags = tags

    @property
    def created_by(self):
        """Gets the created_by of this Key.


        :return: The created_by of this Key.
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this Key.


        :param created_by: The created_by of this Key.
        :type created_by: str
        """

        self._created_by = created_by

    @property
    def owned_by(self):
        """Gets the owned_by of this Key.


        :return: The owned_by of this Key.
        :rtype: str
        """
        return self._owned_by

    @owned_by.setter
    def owned_by(self, owned_by):
        """Sets the owned_by of this Key.


        :param owned_by: The owned_by of this Key.
        :type owned_by: str
        """

        self._owned_by = owned_by

    @property
    def default(self):
        """Gets the default of this Key.


        :return: The default of this Key.
        :rtype: bool
        """
        return self._default

    @default.setter
    def default(self, default):
        """Sets the default of this Key.


        :param default: The default of this Key.
        :type default: bool
        """

        self._default = default

    @property
    def type(self):
        """Gets the type of this Key.


        :return: The type of this Key.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Key.


        :param type: The type of this Key.
        :type type: str
        """
        allowed_values = ["ssh", "signed_ssh"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
