# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from mist_api_v2.models.base_model_ import Model
from mist_api_v2 import util


class ScheduleEntry(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, datetime=None, minute=None, hour=None, day_of_month=None, month_of_year=None, day_of_week=None, every=None, period=None):  # noqa: E501
        """ScheduleEntry - a model defined in OpenAPI

        :param datetime: The datetime of this ScheduleEntry.  # noqa: E501
        :type datetime: datetime
        :param minute: The minute of this ScheduleEntry.  # noqa: E501
        :type minute: str
        :param hour: The hour of this ScheduleEntry.  # noqa: E501
        :type hour: str
        :param day_of_month: The day_of_month of this ScheduleEntry.  # noqa: E501
        :type day_of_month: str
        :param month_of_year: The month_of_year of this ScheduleEntry.  # noqa: E501
        :type month_of_year: str
        :param day_of_week: The day_of_week of this ScheduleEntry.  # noqa: E501
        :type day_of_week: str
        :param every: The every of this ScheduleEntry.  # noqa: E501
        :type every: int
        :param period: The period of this ScheduleEntry.  # noqa: E501
        :type period: str
        """
        self.openapi_types = {
            'datetime': datetime,
            'minute': str,
            'hour': str,
            'day_of_month': str,
            'month_of_year': str,
            'day_of_week': str,
            'every': int,
            'period': str
        }

        self.attribute_map = {
            'datetime': 'datetime',
            'minute': 'minute',
            'hour': 'hour',
            'day_of_month': 'day_of_month',
            'month_of_year': 'month_of_year',
            'day_of_week': 'day_of_week',
            'every': 'every',
            'period': 'period'
        }

        self._datetime = datetime
        self._minute = minute
        self._hour = hour
        self._day_of_month = day_of_month
        self._month_of_year = month_of_year
        self._day_of_week = day_of_week
        self._every = every
        self._period = period

    @classmethod
    def from_dict(cls, dikt) -> 'ScheduleEntry':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ScheduleEntry of this ScheduleEntry.  # noqa: E501
        :rtype: ScheduleEntry
        """
        return util.deserialize_model(dikt, cls)

    @property
    def datetime(self):
        """Gets the datetime of this ScheduleEntry.

        When one_off schedule should run, e.g 2021-09-22T18:19:28Z  # noqa: E501

        :return: The datetime of this ScheduleEntry.
        :rtype: datetime
        """
        return self._datetime

    @datetime.setter
    def datetime(self, datetime):
        """Sets the datetime of this ScheduleEntry.

        When one_off schedule should run, e.g 2021-09-22T18:19:28Z  # noqa: E501

        :param datetime: The datetime of this ScheduleEntry.
        :type datetime: datetime
        """

        self._datetime = datetime

    @property
    def minute(self):
        """Gets the minute of this ScheduleEntry.


        :return: The minute of this ScheduleEntry.
        :rtype: str
        """
        return self._minute

    @minute.setter
    def minute(self, minute):
        """Sets the minute of this ScheduleEntry.


        :param minute: The minute of this ScheduleEntry.
        :type minute: str
        """

        self._minute = minute

    @property
    def hour(self):
        """Gets the hour of this ScheduleEntry.


        :return: The hour of this ScheduleEntry.
        :rtype: str
        """
        return self._hour

    @hour.setter
    def hour(self, hour):
        """Sets the hour of this ScheduleEntry.


        :param hour: The hour of this ScheduleEntry.
        :type hour: str
        """

        self._hour = hour

    @property
    def day_of_month(self):
        """Gets the day_of_month of this ScheduleEntry.


        :return: The day_of_month of this ScheduleEntry.
        :rtype: str
        """
        return self._day_of_month

    @day_of_month.setter
    def day_of_month(self, day_of_month):
        """Sets the day_of_month of this ScheduleEntry.


        :param day_of_month: The day_of_month of this ScheduleEntry.
        :type day_of_month: str
        """

        self._day_of_month = day_of_month

    @property
    def month_of_year(self):
        """Gets the month_of_year of this ScheduleEntry.


        :return: The month_of_year of this ScheduleEntry.
        :rtype: str
        """
        return self._month_of_year

    @month_of_year.setter
    def month_of_year(self, month_of_year):
        """Sets the month_of_year of this ScheduleEntry.


        :param month_of_year: The month_of_year of this ScheduleEntry.
        :type month_of_year: str
        """

        self._month_of_year = month_of_year

    @property
    def day_of_week(self):
        """Gets the day_of_week of this ScheduleEntry.


        :return: The day_of_week of this ScheduleEntry.
        :rtype: str
        """
        return self._day_of_week

    @day_of_week.setter
    def day_of_week(self, day_of_week):
        """Sets the day_of_week of this ScheduleEntry.


        :param day_of_week: The day_of_week of this ScheduleEntry.
        :type day_of_week: str
        """

        self._day_of_week = day_of_week

    @property
    def every(self):
        """Gets the every of this ScheduleEntry.


        :return: The every of this ScheduleEntry.
        :rtype: int
        """
        return self._every

    @every.setter
    def every(self, every):
        """Sets the every of this ScheduleEntry.


        :param every: The every of this ScheduleEntry.
        :type every: int
        """

        self._every = every

    @property
    def period(self):
        """Gets the period of this ScheduleEntry.


        :return: The period of this ScheduleEntry.
        :rtype: str
        """
        return self._period

    @period.setter
    def period(self, period):
        """Sets the period of this ScheduleEntry.


        :param period: The period of this ScheduleEntry.
        :type period: str
        """
        allowed_values = ["minutes", "hours", "days"]  # noqa: E501
        if period not in allowed_values:
            raise ValueError(
                "Invalid value for `period` ({0}), must be one of {1}"
                .format(period, allowed_values)
            )

        self._period = period
