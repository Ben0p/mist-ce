# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from mist_api_v2.models.base_model_ import Model
from mist_api_v2.models.external_vault import ExternalVault
from mist_api_v2 import util

from mist_api_v2.models.external_vault import ExternalVault  # noqa: E501

class CreateOrganizationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name=None, description=None, logo=None, vault=None):  # noqa: E501
        """CreateOrganizationRequest - a model defined in OpenAPI

        :param name: The name of this CreateOrganizationRequest.  # noqa: E501
        :type name: str
        :param description: The description of this CreateOrganizationRequest.  # noqa: E501
        :type description: str
        :param logo: The logo of this CreateOrganizationRequest.  # noqa: E501
        :type logo: str
        :param vault: The vault of this CreateOrganizationRequest.  # noqa: E501
        :type vault: object
        """
        self.openapi_types = {
            'name': str,
            'description': str,
            'logo': str,
            'vault': object
        }

        self.attribute_map = {
            'name': 'name',
            'description': 'description',
            'logo': 'logo',
            'vault': 'vault'
        }

        self._name = name
        self._description = description
        self._logo = logo
        self._vault = vault

    @classmethod
    def from_dict(cls, dikt) -> 'CreateOrganizationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CreateOrganizationRequest of this CreateOrganizationRequest.  # noqa: E501
        :rtype: CreateOrganizationRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this CreateOrganizationRequest.


        :return: The name of this CreateOrganizationRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateOrganizationRequest.


        :param name: The name of this CreateOrganizationRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this CreateOrganizationRequest.


        :return: The description of this CreateOrganizationRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateOrganizationRequest.


        :param description: The description of this CreateOrganizationRequest.
        :type description: str
        """

        self._description = description

    @property
    def logo(self):
        """Gets the logo of this CreateOrganizationRequest.


        :return: The logo of this CreateOrganizationRequest.
        :rtype: str
        """
        return self._logo

    @logo.setter
    def logo(self, logo):
        """Sets the logo of this CreateOrganizationRequest.


        :param logo: The logo of this CreateOrganizationRequest.
        :type logo: str
        """

        self._logo = logo

    @property
    def vault(self):
        """Gets the vault of this CreateOrganizationRequest.


        :return: The vault of this CreateOrganizationRequest.
        :rtype: object
        """
        return self._vault

    @vault.setter
    def vault(self, vault):
        """Sets the vault of this CreateOrganizationRequest.


        :param vault: The vault of this CreateOrganizationRequest.
        :type vault: object
        """

        self._vault = vault
