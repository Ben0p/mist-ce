# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from mist_api_v2.models.base_model_ import Model
from mist_api_v2 import util


class Query(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, target=None, operator=None, threshold=None, aggregation=None):  # noqa: E501
        """Query - a model defined in OpenAPI

        :param target: The target of this Query.  # noqa: E501
        :type target: str
        :param operator: The operator of this Query.  # noqa: E501
        :type operator: str
        :param threshold: The threshold of this Query.  # noqa: E501
        :type threshold: float
        :param aggregation: The aggregation of this Query.  # noqa: E501
        :type aggregation: str
        """
        self.openapi_types = {
            'target': str,
            'operator': str,
            'threshold': float,
            'aggregation': str
        }

        self.attribute_map = {
            'target': 'target',
            'operator': 'operator',
            'threshold': 'threshold',
            'aggregation': 'aggregation'
        }

        self._target = target
        self._operator = operator
        self._threshold = threshold
        self._aggregation = aggregation

    @classmethod
    def from_dict(cls, dikt) -> 'Query':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Query of this Query.  # noqa: E501
        :rtype: Query
        """
        return util.deserialize_model(dikt, cls)

    @property
    def target(self):
        """Gets the target of this Query.

        the metric's name, e.g. \"load.shortterm\"  # noqa: E501

        :return: The target of this Query.
        :rtype: str
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this Query.

        the metric's name, e.g. \"load.shortterm\"  # noqa: E501

        :param target: The target of this Query.
        :type target: str
        """
        if target is None:
            raise ValueError("Invalid value for `target`, must not be `None`")  # noqa: E501

        self._target = target

    @property
    def operator(self):
        """Gets the operator of this Query.

        the operator used to compare the computed value with the given threshold   # noqa: E501

        :return: The operator of this Query.
        :rtype: str
        """
        return self._operator

    @operator.setter
    def operator(self, operator):
        """Sets the operator of this Query.

        the operator used to compare the computed value with the given threshold   # noqa: E501

        :param operator: The operator of this Query.
        :type operator: str
        """
        if operator is None:
            raise ValueError("Invalid value for `operator`, must not be `None`")  # noqa: E501

        self._operator = operator

    @property
    def threshold(self):
        """Gets the threshold of this Query.

        the value over/under which an alert will be raised  # noqa: E501

        :return: The threshold of this Query.
        :rtype: float
        """
        return self._threshold

    @threshold.setter
    def threshold(self, threshold):
        """Sets the threshold of this Query.

        the value over/under which an alert will be raised  # noqa: E501

        :param threshold: The threshold of this Query.
        :type threshold: float
        """
        if threshold is None:
            raise ValueError("Invalid value for `threshold`, must not be `None`")  # noqa: E501

        self._threshold = threshold

    @property
    def aggregation(self):
        """Gets the aggregation of this Query.

        the function to be applied on the computed series. Must be one of: all, any, avg   # noqa: E501

        :return: The aggregation of this Query.
        :rtype: str
        """
        return self._aggregation

    @aggregation.setter
    def aggregation(self, aggregation):
        """Sets the aggregation of this Query.

        the function to be applied on the computed series. Must be one of: all, any, avg   # noqa: E501

        :param aggregation: The aggregation of this Query.
        :type aggregation: str
        """
        if aggregation is None:
            raise ValueError("Invalid value for `aggregation`, must not be `None`")  # noqa: E501

        self._aggregation = aggregation
