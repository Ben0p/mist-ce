# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from mist_api_v2.models.base_model_ import Model
from mist_api_v2 import util


class VultrNet(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, networks=None, ipv6=None, hostname=None):  # noqa: E501
        """VultrNet - a model defined in OpenAPI

        :param networks: The networks of this VultrNet.  # noqa: E501
        :type networks: List[str]
        :param ipv6: The ipv6 of this VultrNet.  # noqa: E501
        :type ipv6: bool
        :param hostname: The hostname of this VultrNet.  # noqa: E501
        :type hostname: str
        """
        self.openapi_types = {
            'networks': List[str],
            'ipv6': bool,
            'hostname': str
        }

        self.attribute_map = {
            'networks': 'networks',
            'ipv6': 'ipv6',
            'hostname': 'hostname'
        }

        self._networks = networks
        self._ipv6 = ipv6
        self._hostname = hostname

    @classmethod
    def from_dict(cls, dikt) -> 'VultrNet':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The VultrNet of this VultrNet.  # noqa: E501
        :rtype: VultrNet
        """
        return util.deserialize_model(dikt, cls)

    @property
    def networks(self):
        """Gets the networks of this VultrNet.

        An array of network names or IDs to attach to this machine, invalid for \"Bare Metal\" machines  # noqa: E501

        :return: The networks of this VultrNet.
        :rtype: List[str]
        """
        return self._networks

    @networks.setter
    def networks(self, networks):
        """Sets the networks of this VultrNet.

        An array of network names or IDs to attach to this machine, invalid for \"Bare Metal\" machines  # noqa: E501

        :param networks: The networks of this VultrNet.
        :type networks: List[str]
        """

        self._networks = networks

    @property
    def ipv6(self):
        """Gets the ipv6 of this VultrNet.

        Enable IPv6, defaults to false  # noqa: E501

        :return: The ipv6 of this VultrNet.
        :rtype: bool
        """
        return self._ipv6

    @ipv6.setter
    def ipv6(self, ipv6):
        """Sets the ipv6 of this VultrNet.

        Enable IPv6, defaults to false  # noqa: E501

        :param ipv6: The ipv6 of this VultrNet.
        :type ipv6: bool
        """

        self._ipv6 = ipv6

    @property
    def hostname(self):
        """Gets the hostname of this VultrNet.

        The hostname to use when deploying this machine, defaults to machine name  # noqa: E501

        :return: The hostname of this VultrNet.
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this VultrNet.

        The hostname to use when deploying this machine, defaults to machine name  # noqa: E501

        :param hostname: The hostname of this VultrNet.
        :type hostname: str
        """

        self._hostname = hostname
