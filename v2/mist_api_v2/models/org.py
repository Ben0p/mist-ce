# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from mist_api_v2.models.base_model_ import Model
from mist_api_v2.models.org_resources_summary import OrgResourcesSummary
from mist_api_v2 import util

from mist_api_v2.models.org_resources_summary import OrgResourcesSummary  # noqa: E501

class Org(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, name=None, description=None, avatar=None, created=None, billing=None, last_active=None, resources=None):  # noqa: E501
        """Org - a model defined in OpenAPI

        :param id: The id of this Org.  # noqa: E501
        :type id: str
        :param name: The name of this Org.  # noqa: E501
        :type name: str
        :param description: The description of this Org.  # noqa: E501
        :type description: str
        :param avatar: The avatar of this Org.  # noqa: E501
        :type avatar: str
        :param created: The created of this Org.  # noqa: E501
        :type created: bool
        :param billing: The billing of this Org.  # noqa: E501
        :type billing: object
        :param last_active: The last_active of this Org.  # noqa: E501
        :type last_active: str
        :param resources: The resources of this Org.  # noqa: E501
        :type resources: OrgResourcesSummary
        """
        self.openapi_types = {
            'id': str,
            'name': str,
            'description': str,
            'avatar': str,
            'created': bool,
            'billing': object,
            'last_active': str,
            'resources': OrgResourcesSummary
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'description': 'description',
            'avatar': 'avatar',
            'created': 'created',
            'billing': 'billing',
            'last_active': 'last_active',
            'resources': 'resources'
        }

        self._id = id
        self._name = name
        self._description = description
        self._avatar = avatar
        self._created = created
        self._billing = billing
        self._last_active = last_active
        self._resources = resources

    @classmethod
    def from_dict(cls, dikt) -> 'Org':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Org of this Org.  # noqa: E501
        :rtype: Org
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Org.


        :return: The id of this Org.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Org.


        :param id: The id of this Org.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Org.


        :return: The name of this Org.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Org.


        :param name: The name of this Org.
        :type name: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this Org.


        :return: The description of this Org.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Org.


        :param description: The description of this Org.
        :type description: str
        """

        self._description = description

    @property
    def avatar(self):
        """Gets the avatar of this Org.


        :return: The avatar of this Org.
        :rtype: str
        """
        return self._avatar

    @avatar.setter
    def avatar(self, avatar):
        """Sets the avatar of this Org.


        :param avatar: The avatar of this Org.
        :type avatar: str
        """

        self._avatar = avatar

    @property
    def created(self):
        """Gets the created of this Org.


        :return: The created of this Org.
        :rtype: bool
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Org.


        :param created: The created of this Org.
        :type created: bool
        """

        self._created = created

    @property
    def billing(self):
        """Gets the billing of this Org.


        :return: The billing of this Org.
        :rtype: object
        """
        return self._billing

    @billing.setter
    def billing(self, billing):
        """Sets the billing of this Org.


        :param billing: The billing of this Org.
        :type billing: object
        """

        self._billing = billing

    @property
    def last_active(self):
        """Gets the last_active of this Org.


        :return: The last_active of this Org.
        :rtype: str
        """
        return self._last_active

    @last_active.setter
    def last_active(self, last_active):
        """Sets the last_active of this Org.


        :param last_active: The last_active of this Org.
        :type last_active: str
        """

        self._last_active = last_active

    @property
    def resources(self):
        """Gets the resources of this Org.


        :return: The resources of this Org.
        :rtype: OrgResourcesSummary
        """
        return self._resources

    @resources.setter
    def resources(self, resources):
        """Sets the resources of this Org.


        :param resources: The resources of this Org.
        :type resources: OrgResourcesSummary
        """

        self._resources = resources
