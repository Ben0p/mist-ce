# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from mist_api_v2.models.base_model_ import Model
from mist_api_v2 import util


class KubevirtCredentials(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, host=None, port=None, username=None, password=None, token=None, tls_key=None, tls_cert=None, tls_ca_cert=None, show_all=None):  # noqa: E501
        """KubevirtCredentials - a model defined in OpenAPI

        :param host: The host of this KubevirtCredentials.  # noqa: E501
        :type host: str
        :param port: The port of this KubevirtCredentials.  # noqa: E501
        :type port: str
        :param username: The username of this KubevirtCredentials.  # noqa: E501
        :type username: str
        :param password: The password of this KubevirtCredentials.  # noqa: E501
        :type password: str
        :param token: The token of this KubevirtCredentials.  # noqa: E501
        :type token: str
        :param tls_key: The tls_key of this KubevirtCredentials.  # noqa: E501
        :type tls_key: str
        :param tls_cert: The tls_cert of this KubevirtCredentials.  # noqa: E501
        :type tls_cert: str
        :param tls_ca_cert: The tls_ca_cert of this KubevirtCredentials.  # noqa: E501
        :type tls_ca_cert: str
        :param show_all: The show_all of this KubevirtCredentials.  # noqa: E501
        :type show_all: bool
        """
        self.openapi_types = {
            'host': str,
            'port': str,
            'username': str,
            'password': str,
            'token': str,
            'tls_key': str,
            'tls_cert': str,
            'tls_ca_cert': str,
            'show_all': bool
        }

        self.attribute_map = {
            'host': 'host',
            'port': 'port',
            'username': 'username',
            'password': 'password',
            'token': 'token',
            'tls_key': 'tlsKey',
            'tls_cert': 'tlsCert',
            'tls_ca_cert': 'tlsCaCert',
            'show_all': 'showAll'
        }

        self._host = host
        self._port = port
        self._username = username
        self._password = password
        self._token = token
        self._tls_key = tls_key
        self._tls_cert = tls_cert
        self._tls_ca_cert = tls_ca_cert
        self._show_all = show_all

    @classmethod
    def from_dict(cls, dikt) -> 'KubevirtCredentials':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The KubevirtCredentials of this KubevirtCredentials.  # noqa: E501
        :rtype: KubevirtCredentials
        """
        return util.deserialize_model(dikt, cls)

    @property
    def host(self):
        """Gets the host of this KubevirtCredentials.

        Your Kubernetes API host  # noqa: E501

        :return: The host of this KubevirtCredentials.
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this KubevirtCredentials.

        Your Kubernetes API host  # noqa: E501

        :param host: The host of this KubevirtCredentials.
        :type host: str
        """
        if host is None:
            raise ValueError("Invalid value for `host`, must not be `None`")  # noqa: E501

        self._host = host

    @property
    def port(self):
        """Gets the port of this KubevirtCredentials.

        Your Kubernetes API port  # noqa: E501

        :return: The port of this KubevirtCredentials.
        :rtype: str
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this KubevirtCredentials.

        Your Kubernetes API port  # noqa: E501

        :param port: The port of this KubevirtCredentials.
        :type port: str
        """
        if port is None:
            raise ValueError("Invalid value for `port`, must not be `None`")  # noqa: E501

        self._port = port

    @property
    def username(self):
        """Gets the username of this KubevirtCredentials.

        Your Kubernetes API username  # noqa: E501

        :return: The username of this KubevirtCredentials.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this KubevirtCredentials.

        Your Kubernetes API username  # noqa: E501

        :param username: The username of this KubevirtCredentials.
        :type username: str
        """

        self._username = username

    @property
    def password(self):
        """Gets the password of this KubevirtCredentials.

        Your Kubernetes API password  # noqa: E501

        :return: The password of this KubevirtCredentials.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this KubevirtCredentials.

        Your Kubernetes API password  # noqa: E501

        :param password: The password of this KubevirtCredentials.
        :type password: str
        """

        self._password = password

    @property
    def token(self):
        """Gets the token of this KubevirtCredentials.

        Your Kubernetes API bearer token  # noqa: E501

        :return: The token of this KubevirtCredentials.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this KubevirtCredentials.

        Your Kubernetes API bearer token  # noqa: E501

        :param token: The token of this KubevirtCredentials.
        :type token: str
        """

        self._token = token

    @property
    def tls_key(self):
        """Gets the tls_key of this KubevirtCredentials.

        Your TLS auth key  # noqa: E501

        :return: The tls_key of this KubevirtCredentials.
        :rtype: str
        """
        return self._tls_key

    @tls_key.setter
    def tls_key(self, tls_key):
        """Sets the tls_key of this KubevirtCredentials.

        Your TLS auth key  # noqa: E501

        :param tls_key: The tls_key of this KubevirtCredentials.
        :type tls_key: str
        """

        self._tls_key = tls_key

    @property
    def tls_cert(self):
        """Gets the tls_cert of this KubevirtCredentials.

        Your TLS auth certificate  # noqa: E501

        :return: The tls_cert of this KubevirtCredentials.
        :rtype: str
        """
        return self._tls_cert

    @tls_cert.setter
    def tls_cert(self, tls_cert):
        """Sets the tls_cert of this KubevirtCredentials.

        Your TLS auth certificate  # noqa: E501

        :param tls_cert: The tls_cert of this KubevirtCredentials.
        :type tls_cert: str
        """

        self._tls_cert = tls_cert

    @property
    def tls_ca_cert(self):
        """Gets the tls_ca_cert of this KubevirtCredentials.

        Your TLS CA certifcate  # noqa: E501

        :return: The tls_ca_cert of this KubevirtCredentials.
        :rtype: str
        """
        return self._tls_ca_cert

    @tls_ca_cert.setter
    def tls_ca_cert(self, tls_ca_cert):
        """Sets the tls_ca_cert of this KubevirtCredentials.

        Your TLS CA certifcate  # noqa: E501

        :param tls_ca_cert: The tls_ca_cert of this KubevirtCredentials.
        :type tls_ca_cert: str
        """

        self._tls_ca_cert = tls_ca_cert

    @property
    def show_all(self):
        """Gets the show_all of this KubevirtCredentials.

        Show all containers, including stopped  # noqa: E501

        :return: The show_all of this KubevirtCredentials.
        :rtype: bool
        """
        return self._show_all

    @show_all.setter
    def show_all(self, show_all):
        """Sets the show_all of this KubevirtCredentials.

        Show all containers, including stopped  # noqa: E501

        :param show_all: The show_all of this KubevirtCredentials.
        :type show_all: bool
        """

        self._show_all = show_all
