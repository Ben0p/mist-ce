# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from mist_api_v2.models.base_model_ import Model
from mist_api_v2 import util


class RunExistingScript(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, script_type=None, script=None, params=None):  # noqa: E501
        """RunExistingScript - a model defined in OpenAPI

        :param script_type: The script_type of this RunExistingScript.  # noqa: E501
        :type script_type: str
        :param script: The script of this RunExistingScript.  # noqa: E501
        :type script: str
        :param params: The params of this RunExistingScript.  # noqa: E501
        :type params: str
        """
        self.openapi_types = {
            'script_type': str,
            'script': str,
            'params': str
        }

        self.attribute_map = {
            'script_type': 'script_type',
            'script': 'script',
            'params': 'params'
        }

        self._script_type = script_type
        self._script = script
        self._params = params

    @classmethod
    def from_dict(cls, dikt) -> 'RunExistingScript':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The RunExistingScript of this RunExistingScript.  # noqa: E501
        :rtype: RunExistingScript
        """
        return util.deserialize_model(dikt, cls)

    @property
    def script_type(self):
        """Gets the script_type of this RunExistingScript.


        :return: The script_type of this RunExistingScript.
        :rtype: str
        """
        return self._script_type

    @script_type.setter
    def script_type(self, script_type):
        """Sets the script_type of this RunExistingScript.


        :param script_type: The script_type of this RunExistingScript.
        :type script_type: str
        """
        allowed_values = ["existing"]  # noqa: E501
        if script_type not in allowed_values:
            raise ValueError(
                "Invalid value for `script_type` ({0}), must be one of {1}"
                .format(script_type, allowed_values)
            )

        self._script_type = script_type

    @property
    def script(self):
        """Gets the script of this RunExistingScript.

        Name or ID of the script to run  # noqa: E501

        :return: The script of this RunExistingScript.
        :rtype: str
        """
        return self._script

    @script.setter
    def script(self, script):
        """Sets the script of this RunExistingScript.

        Name or ID of the script to run  # noqa: E501

        :param script: The script of this RunExistingScript.
        :type script: str
        """
        if script is None:
            raise ValueError("Invalid value for `script`, must not be `None`")  # noqa: E501

        self._script = script

    @property
    def params(self):
        """Gets the params of this RunExistingScript.


        :return: The params of this RunExistingScript.
        :rtype: str
        """
        return self._params

    @params.setter
    def params(self, params):
        """Sets the params of this RunExistingScript.


        :param params: The params of this RunExistingScript.
        :type params: str
        """

        self._params = params
