# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from mist_api_v2.models.base_model_ import Model
from mist_api_v2 import util


class OpenstackCredentials(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auth_url=None, user=None, password=None, tenant=None, domain=None, region=None, compute_endpoint=None):  # noqa: E501
        """OpenstackCredentials - a model defined in OpenAPI

        :param auth_url: The auth_url of this OpenstackCredentials.  # noqa: E501
        :type auth_url: str
        :param user: The user of this OpenstackCredentials.  # noqa: E501
        :type user: str
        :param password: The password of this OpenstackCredentials.  # noqa: E501
        :type password: str
        :param tenant: The tenant of this OpenstackCredentials.  # noqa: E501
        :type tenant: str
        :param domain: The domain of this OpenstackCredentials.  # noqa: E501
        :type domain: str
        :param region: The region of this OpenstackCredentials.  # noqa: E501
        :type region: str
        :param compute_endpoint: The compute_endpoint of this OpenstackCredentials.  # noqa: E501
        :type compute_endpoint: str
        """
        self.openapi_types = {
            'auth_url': str,
            'user': str,
            'password': str,
            'tenant': str,
            'domain': str,
            'region': str,
            'compute_endpoint': str
        }

        self.attribute_map = {
            'auth_url': 'authUrl',
            'user': 'user',
            'password': 'password',
            'tenant': 'tenant',
            'domain': 'domain',
            'region': 'region',
            'compute_endpoint': 'computeEndpoint'
        }

        self._auth_url = auth_url
        self._user = user
        self._password = password
        self._tenant = tenant
        self._domain = domain
        self._region = region
        self._compute_endpoint = compute_endpoint

    @classmethod
    def from_dict(cls, dikt) -> 'OpenstackCredentials':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The OpenstackCredentials of this OpenstackCredentials.  # noqa: E501
        :rtype: OpenstackCredentials
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auth_url(self):
        """Gets the auth_url of this OpenstackCredentials.


        :return: The auth_url of this OpenstackCredentials.
        :rtype: str
        """
        return self._auth_url

    @auth_url.setter
    def auth_url(self, auth_url):
        """Sets the auth_url of this OpenstackCredentials.


        :param auth_url: The auth_url of this OpenstackCredentials.
        :type auth_url: str
        """
        if auth_url is None:
            raise ValueError("Invalid value for `auth_url`, must not be `None`")  # noqa: E501

        self._auth_url = auth_url

    @property
    def user(self):
        """Gets the user of this OpenstackCredentials.


        :return: The user of this OpenstackCredentials.
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this OpenstackCredentials.


        :param user: The user of this OpenstackCredentials.
        :type user: str
        """
        if user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")  # noqa: E501

        self._user = user

    @property
    def password(self):
        """Gets the password of this OpenstackCredentials.


        :return: The password of this OpenstackCredentials.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this OpenstackCredentials.


        :param password: The password of this OpenstackCredentials.
        :type password: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")  # noqa: E501

        self._password = password

    @property
    def tenant(self):
        """Gets the tenant of this OpenstackCredentials.


        :return: The tenant of this OpenstackCredentials.
        :rtype: str
        """
        return self._tenant

    @tenant.setter
    def tenant(self, tenant):
        """Sets the tenant of this OpenstackCredentials.


        :param tenant: The tenant of this OpenstackCredentials.
        :type tenant: str
        """

        self._tenant = tenant

    @property
    def domain(self):
        """Gets the domain of this OpenstackCredentials.


        :return: The domain of this OpenstackCredentials.
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this OpenstackCredentials.


        :param domain: The domain of this OpenstackCredentials.
        :type domain: str
        """

        self._domain = domain

    @property
    def region(self):
        """Gets the region of this OpenstackCredentials.


        :return: The region of this OpenstackCredentials.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this OpenstackCredentials.


        :param region: The region of this OpenstackCredentials.
        :type region: str
        """

        self._region = region

    @property
    def compute_endpoint(self):
        """Gets the compute_endpoint of this OpenstackCredentials.


        :return: The compute_endpoint of this OpenstackCredentials.
        :rtype: str
        """
        return self._compute_endpoint

    @compute_endpoint.setter
    def compute_endpoint(self, compute_endpoint):
        """Sets the compute_endpoint of this OpenstackCredentials.


        :param compute_endpoint: The compute_endpoint of this OpenstackCredentials.
        :type compute_endpoint: str
        """

        self._compute_endpoint = compute_endpoint
