# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from mist_api_v2.models.base_model_ import Model
from mist_api_v2.models.action import Action
from mist_api_v2.models.add_schedule_request_reminder import AddScheduleRequestReminder
from mist_api_v2.models.selector import Selector
from mist_api_v2.models.when import When
from mist_api_v2 import util

from mist_api_v2.models.action import Action  # noqa: E501
from mist_api_v2.models.add_schedule_request_reminder import AddScheduleRequestReminder  # noqa: E501
from mist_api_v2.models.selector import Selector  # noqa: E501
from mist_api_v2.models.when import When  # noqa: E501

class EditScheduleRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name=None, description=None, enabled=None, selectors=None, actions=None, when=None, expires=None, reminder=None):  # noqa: E501
        """EditScheduleRequest - a model defined in OpenAPI

        :param name: The name of this EditScheduleRequest.  # noqa: E501
        :type name: str
        :param description: The description of this EditScheduleRequest.  # noqa: E501
        :type description: str
        :param enabled: The enabled of this EditScheduleRequest.  # noqa: E501
        :type enabled: bool
        :param selectors: The selectors of this EditScheduleRequest.  # noqa: E501
        :type selectors: List[Selector]
        :param actions: The actions of this EditScheduleRequest.  # noqa: E501
        :type actions: List[Action]
        :param when: The when of this EditScheduleRequest.  # noqa: E501
        :type when: When
        :param expires: The expires of this EditScheduleRequest.  # noqa: E501
        :type expires: str
        :param reminder: The reminder of this EditScheduleRequest.  # noqa: E501
        :type reminder: AddScheduleRequestReminder
        """
        self.openapi_types = {
            'name': str,
            'description': str,
            'enabled': bool,
            'selectors': List[Selector],
            'actions': List[Action],
            'when': When,
            'expires': str,
            'reminder': AddScheduleRequestReminder
        }

        self.attribute_map = {
            'name': 'name',
            'description': 'description',
            'enabled': 'enabled',
            'selectors': 'selectors',
            'actions': 'actions',
            'when': 'when',
            'expires': 'expires',
            'reminder': 'reminder'
        }

        self._name = name
        self._description = description
        self._enabled = enabled
        self._selectors = selectors
        self._actions = actions
        self._when = when
        self._expires = expires
        self._reminder = reminder

    @classmethod
    def from_dict(cls, dikt) -> 'EditScheduleRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The EditScheduleRequest of this EditScheduleRequest.  # noqa: E501
        :rtype: EditScheduleRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this EditScheduleRequest.

        The name of the schedule that is about to be edited  # noqa: E501

        :return: The name of this EditScheduleRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EditScheduleRequest.

        The name of the schedule that is about to be edited  # noqa: E501

        :param name: The name of this EditScheduleRequest.
        :type name: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this EditScheduleRequest.

        The description of the schedule that is about to be edited  # noqa: E501

        :return: The description of this EditScheduleRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this EditScheduleRequest.

        The description of the schedule that is about to be edited  # noqa: E501

        :param description: The description of this EditScheduleRequest.
        :type description: str
        """

        self._description = description

    @property
    def enabled(self):
        """Gets the enabled of this EditScheduleRequest.

        Schedule status (enabled, disabled)  # noqa: E501

        :return: The enabled of this EditScheduleRequest.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this EditScheduleRequest.

        Schedule status (enabled, disabled)  # noqa: E501

        :param enabled: The enabled of this EditScheduleRequest.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def selectors(self):
        """Gets the selectors of this EditScheduleRequest.


        :return: The selectors of this EditScheduleRequest.
        :rtype: List[Selector]
        """
        return self._selectors

    @selectors.setter
    def selectors(self, selectors):
        """Sets the selectors of this EditScheduleRequest.


        :param selectors: The selectors of this EditScheduleRequest.
        :type selectors: List[Selector]
        """

        self._selectors = selectors

    @property
    def actions(self):
        """Gets the actions of this EditScheduleRequest.


        :return: The actions of this EditScheduleRequest.
        :rtype: List[Action]
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """Sets the actions of this EditScheduleRequest.


        :param actions: The actions of this EditScheduleRequest.
        :type actions: List[Action]
        """

        self._actions = actions

    @property
    def when(self):
        """Gets the when of this EditScheduleRequest.


        :return: The when of this EditScheduleRequest.
        :rtype: When
        """
        return self._when

    @when.setter
    def when(self, when):
        """Sets the when of this EditScheduleRequest.


        :param when: The when of this EditScheduleRequest.
        :type when: When
        """

        self._when = when

    @property
    def expires(self):
        """Gets the expires of this EditScheduleRequest.

        The date after that schedule expires. The format should be ΥΥΥΥ-ΜΜ-DD HH:MM:SS  # noqa: E501

        :return: The expires of this EditScheduleRequest.
        :rtype: str
        """
        return self._expires

    @expires.setter
    def expires(self, expires):
        """Sets the expires of this EditScheduleRequest.

        The date after that schedule expires. The format should be ΥΥΥΥ-ΜΜ-DD HH:MM:SS  # noqa: E501

        :param expires: The expires of this EditScheduleRequest.
        :type expires: str
        """

        self._expires = expires

    @property
    def reminder(self):
        """Gets the reminder of this EditScheduleRequest.


        :return: The reminder of this EditScheduleRequest.
        :rtype: AddScheduleRequestReminder
        """
        return self._reminder

    @reminder.setter
    def reminder(self, reminder):
        """Sets the reminder of this EditScheduleRequest.


        :param reminder: The reminder of this EditScheduleRequest.
        :type reminder: AddScheduleRequestReminder
        """

        self._reminder = reminder
