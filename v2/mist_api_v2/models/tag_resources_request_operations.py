# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from mist_api_v2.models.base_model_ import Model
from mist_api_v2.models.resource import Resource
from mist_api_v2.models.tag import Tag
from mist_api_v2 import util

from mist_api_v2.models.resource import Resource  # noqa: E501
from mist_api_v2.models.tag import Tag  # noqa: E501

class TagResourcesRequestOperations(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, operation=None, tags=None, resources=None):  # noqa: E501
        """TagResourcesRequestOperations - a model defined in OpenAPI

        :param operation: The operation of this TagResourcesRequestOperations.  # noqa: E501
        :type operation: str
        :param tags: The tags of this TagResourcesRequestOperations.  # noqa: E501
        :type tags: List[Tag]
        :param resources: The resources of this TagResourcesRequestOperations.  # noqa: E501
        :type resources: List[Resource]
        """
        self.openapi_types = {
            'operation': str,
            'tags': List[Tag],
            'resources': List[Resource]
        }

        self.attribute_map = {
            'operation': 'operation',
            'tags': 'tags',
            'resources': 'resources'
        }

        self._operation = operation
        self._tags = tags
        self._resources = resources

    @classmethod
    def from_dict(cls, dikt) -> 'TagResourcesRequestOperations':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The TagResourcesRequest_operations of this TagResourcesRequestOperations.  # noqa: E501
        :rtype: TagResourcesRequestOperations
        """
        return util.deserialize_model(dikt, cls)

    @property
    def operation(self):
        """Gets the operation of this TagResourcesRequestOperations.


        :return: The operation of this TagResourcesRequestOperations.
        :rtype: str
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """Sets the operation of this TagResourcesRequestOperations.


        :param operation: The operation of this TagResourcesRequestOperations.
        :type operation: str
        """
        allowed_values = ["add", "remove"]  # noqa: E501
        if operation not in allowed_values:
            raise ValueError(
                "Invalid value for `operation` ({0}), must be one of {1}"
                .format(operation, allowed_values)
            )

        self._operation = operation

    @property
    def tags(self):
        """Gets the tags of this TagResourcesRequestOperations.


        :return: The tags of this TagResourcesRequestOperations.
        :rtype: List[Tag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this TagResourcesRequestOperations.


        :param tags: The tags of this TagResourcesRequestOperations.
        :type tags: List[Tag]
        """

        self._tags = tags

    @property
    def resources(self):
        """Gets the resources of this TagResourcesRequestOperations.


        :return: The resources of this TagResourcesRequestOperations.
        :rtype: List[Resource]
        """
        return self._resources

    @resources.setter
    def resources(self, resources):
        """Sets the resources of this TagResourcesRequestOperations.


        :param resources: The resources of this TagResourcesRequestOperations.
        :type resources: List[Resource]
        """

        self._resources = resources
