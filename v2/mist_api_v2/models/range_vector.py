# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from mist_api_v2.models.base_model_ import Model
from mist_api_v2.models.datapoints_values_item import DatapointsValuesItem
from mist_api_v2 import util

from mist_api_v2.models.datapoints_values_item import DatapointsValuesItem  # noqa: E501

class RangeVector(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, metric=None, value=None):  # noqa: E501
        """RangeVector - a model defined in OpenAPI

        :param metric: The metric of this RangeVector.  # noqa: E501
        :type metric: object
        :param value: The value of this RangeVector.  # noqa: E501
        :type value: List[List]
        """
        self.openapi_types = {
            'metric': object,
            'value': List[List]
        }

        self.attribute_map = {
            'metric': 'metric',
            'value': 'value'
        }

        self._metric = metric
        self._value = value

    @classmethod
    def from_dict(cls, dikt) -> 'RangeVector':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The RangeVector of this RangeVector.  # noqa: E501
        :rtype: RangeVector
        """
        return util.deserialize_model(dikt, cls)

    @property
    def metric(self):
        """Gets the metric of this RangeVector.


        :return: The metric of this RangeVector.
        :rtype: object
        """
        return self._metric

    @metric.setter
    def metric(self, metric):
        """Sets the metric of this RangeVector.


        :param metric: The metric of this RangeVector.
        :type metric: object
        """

        self._metric = metric

    @property
    def value(self):
        """Gets the value of this RangeVector.


        :return: The value of this RangeVector.
        :rtype: List[List]
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this RangeVector.


        :param value: The value of this RangeVector.
        :type value: List[List]
        """

        self._value = value
