# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from mist_api_v2.models.base_model_ import Model
from mist_api_v2 import util


class KeyMachineAssociation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, key=None, machine=None, last_used=None, port=None, user=None, sudo=None):  # noqa: E501
        """KeyMachineAssociation - a model defined in OpenAPI

        :param key: The key of this KeyMachineAssociation.  # noqa: E501
        :type key: str
        :param machine: The machine of this KeyMachineAssociation.  # noqa: E501
        :type machine: str
        :param last_used: The last_used of this KeyMachineAssociation.  # noqa: E501
        :type last_used: int
        :param port: The port of this KeyMachineAssociation.  # noqa: E501
        :type port: int
        :param user: The user of this KeyMachineAssociation.  # noqa: E501
        :type user: str
        :param sudo: The sudo of this KeyMachineAssociation.  # noqa: E501
        :type sudo: bool
        """
        self.openapi_types = {
            'key': str,
            'machine': str,
            'last_used': int,
            'port': int,
            'user': str,
            'sudo': bool
        }

        self.attribute_map = {
            'key': 'key',
            'machine': 'machine',
            'last_used': 'last_used',
            'port': 'port',
            'user': 'user',
            'sudo': 'sudo'
        }

        self._key = key
        self._machine = machine
        self._last_used = last_used
        self._port = port
        self._user = user
        self._sudo = sudo

    @classmethod
    def from_dict(cls, dikt) -> 'KeyMachineAssociation':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The KeyMachineAssociation of this KeyMachineAssociation.  # noqa: E501
        :rtype: KeyMachineAssociation
        """
        return util.deserialize_model(dikt, cls)

    @property
    def key(self):
        """Gets the key of this KeyMachineAssociation.

        Name or ID of the SSH key  # noqa: E501

        :return: The key of this KeyMachineAssociation.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this KeyMachineAssociation.

        Name or ID of the SSH key  # noqa: E501

        :param key: The key of this KeyMachineAssociation.
        :type key: str
        """

        self._key = key

    @property
    def machine(self):
        """Gets the machine of this KeyMachineAssociation.

        Name or ID of the machine  # noqa: E501

        :return: The machine of this KeyMachineAssociation.
        :rtype: str
        """
        return self._machine

    @machine.setter
    def machine(self, machine):
        """Sets the machine of this KeyMachineAssociation.

        Name or ID of the machine  # noqa: E501

        :param machine: The machine of this KeyMachineAssociation.
        :type machine: str
        """

        self._machine = machine

    @property
    def last_used(self):
        """Gets the last_used of this KeyMachineAssociation.

        Last used time  # noqa: E501

        :return: The last_used of this KeyMachineAssociation.
        :rtype: int
        """
        return self._last_used

    @last_used.setter
    def last_used(self, last_used):
        """Sets the last_used of this KeyMachineAssociation.

        Last used time  # noqa: E501

        :param last_used: The last_used of this KeyMachineAssociation.
        :type last_used: int
        """

        self._last_used = last_used

    @property
    def port(self):
        """Gets the port of this KeyMachineAssociation.

        SSH port  # noqa: E501

        :return: The port of this KeyMachineAssociation.
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this KeyMachineAssociation.

        SSH port  # noqa: E501

        :param port: The port of this KeyMachineAssociation.
        :type port: int
        """

        self._port = port

    @property
    def user(self):
        """Gets the user of this KeyMachineAssociation.

        SSH user  # noqa: E501

        :return: The user of this KeyMachineAssociation.
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this KeyMachineAssociation.

        SSH user  # noqa: E501

        :param user: The user of this KeyMachineAssociation.
        :type user: str
        """

        self._user = user

    @property
    def sudo(self):
        """Gets the sudo of this KeyMachineAssociation.

        Indicates if the SSH user has sudo privileges  # noqa: E501

        :return: The sudo of this KeyMachineAssociation.
        :rtype: bool
        """
        return self._sudo

    @sudo.setter
    def sudo(self, sudo):
        """Sets the sudo of this KeyMachineAssociation.

        Indicates if the SSH user has sudo privileges  # noqa: E501

        :param sudo: The sudo of this KeyMachineAssociation.
        :type sudo: bool
        """

        self._sudo = sudo
