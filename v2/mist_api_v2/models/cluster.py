# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from mist_api_v2.models.base_model_ import Model
from mist_api_v2.models.cluster_providers import ClusterProviders
from mist_api_v2 import util

from mist_api_v2.models.cluster_providers import ClusterProviders  # noqa: E501

class Cluster(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, name=None, cloud=None, provider=None, total_nodes=None, total_cpus=None, total_memory=None, location=None, credentials=None, config=None, tags=None, created_by=None, owned_by=None, extra=None, external_id=None, owner=None, state=None, last_seen=None, missing_since=None, created=None):  # noqa: E501
        """Cluster - a model defined in OpenAPI

        :param id: The id of this Cluster.  # noqa: E501
        :type id: str
        :param name: The name of this Cluster.  # noqa: E501
        :type name: str
        :param cloud: The cloud of this Cluster.  # noqa: E501
        :type cloud: str
        :param provider: The provider of this Cluster.  # noqa: E501
        :type provider: ClusterProviders
        :param total_nodes: The total_nodes of this Cluster.  # noqa: E501
        :type total_nodes: int
        :param total_cpus: The total_cpus of this Cluster.  # noqa: E501
        :type total_cpus: int
        :param total_memory: The total_memory of this Cluster.  # noqa: E501
        :type total_memory: int
        :param location: The location of this Cluster.  # noqa: E501
        :type location: str
        :param credentials: The credentials of this Cluster.  # noqa: E501
        :type credentials: object
        :param config: The config of this Cluster.  # noqa: E501
        :type config: object
        :param tags: The tags of this Cluster.  # noqa: E501
        :type tags: object
        :param created_by: The created_by of this Cluster.  # noqa: E501
        :type created_by: str
        :param owned_by: The owned_by of this Cluster.  # noqa: E501
        :type owned_by: str
        :param extra: The extra of this Cluster.  # noqa: E501
        :type extra: object
        :param external_id: The external_id of this Cluster.  # noqa: E501
        :type external_id: str
        :param owner: The owner of this Cluster.  # noqa: E501
        :type owner: str
        :param state: The state of this Cluster.  # noqa: E501
        :type state: str
        :param last_seen: The last_seen of this Cluster.  # noqa: E501
        :type last_seen: str
        :param missing_since: The missing_since of this Cluster.  # noqa: E501
        :type missing_since: str
        :param created: The created of this Cluster.  # noqa: E501
        :type created: str
        """
        self.openapi_types = {
            'id': str,
            'name': str,
            'cloud': str,
            'provider': ClusterProviders,
            'total_nodes': int,
            'total_cpus': int,
            'total_memory': int,
            'location': str,
            'credentials': object,
            'config': object,
            'tags': object,
            'created_by': str,
            'owned_by': str,
            'extra': object,
            'external_id': str,
            'owner': str,
            'state': str,
            'last_seen': str,
            'missing_since': str,
            'created': str
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'cloud': 'cloud',
            'provider': 'provider',
            'total_nodes': 'total_nodes',
            'total_cpus': 'total_cpus',
            'total_memory': 'total_memory',
            'location': 'location',
            'credentials': 'credentials',
            'config': 'config',
            'tags': 'tags',
            'created_by': 'created_by',
            'owned_by': 'owned_by',
            'extra': 'extra',
            'external_id': 'external_id',
            'owner': 'owner',
            'state': 'state',
            'last_seen': 'last_seen',
            'missing_since': 'missing_since',
            'created': 'created'
        }

        self._id = id
        self._name = name
        self._cloud = cloud
        self._provider = provider
        self._total_nodes = total_nodes
        self._total_cpus = total_cpus
        self._total_memory = total_memory
        self._location = location
        self._credentials = credentials
        self._config = config
        self._tags = tags
        self._created_by = created_by
        self._owned_by = owned_by
        self._extra = extra
        self._external_id = external_id
        self._owner = owner
        self._state = state
        self._last_seen = last_seen
        self._missing_since = missing_since
        self._created = created

    @classmethod
    def from_dict(cls, dikt) -> 'Cluster':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Cluster of this Cluster.  # noqa: E501
        :rtype: Cluster
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Cluster.


        :return: The id of this Cluster.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Cluster.


        :param id: The id of this Cluster.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Cluster.


        :return: The name of this Cluster.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Cluster.


        :param name: The name of this Cluster.
        :type name: str
        """

        self._name = name

    @property
    def cloud(self):
        """Gets the cloud of this Cluster.


        :return: The cloud of this Cluster.
        :rtype: str
        """
        return self._cloud

    @cloud.setter
    def cloud(self, cloud):
        """Sets the cloud of this Cluster.


        :param cloud: The cloud of this Cluster.
        :type cloud: str
        """

        self._cloud = cloud

    @property
    def provider(self):
        """Gets the provider of this Cluster.


        :return: The provider of this Cluster.
        :rtype: ClusterProviders
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this Cluster.


        :param provider: The provider of this Cluster.
        :type provider: ClusterProviders
        """

        self._provider = provider

    @property
    def total_nodes(self):
        """Gets the total_nodes of this Cluster.


        :return: The total_nodes of this Cluster.
        :rtype: int
        """
        return self._total_nodes

    @total_nodes.setter
    def total_nodes(self, total_nodes):
        """Sets the total_nodes of this Cluster.


        :param total_nodes: The total_nodes of this Cluster.
        :type total_nodes: int
        """

        self._total_nodes = total_nodes

    @property
    def total_cpus(self):
        """Gets the total_cpus of this Cluster.


        :return: The total_cpus of this Cluster.
        :rtype: int
        """
        return self._total_cpus

    @total_cpus.setter
    def total_cpus(self, total_cpus):
        """Sets the total_cpus of this Cluster.


        :param total_cpus: The total_cpus of this Cluster.
        :type total_cpus: int
        """

        self._total_cpus = total_cpus

    @property
    def total_memory(self):
        """Gets the total_memory of this Cluster.


        :return: The total_memory of this Cluster.
        :rtype: int
        """
        return self._total_memory

    @total_memory.setter
    def total_memory(self, total_memory):
        """Sets the total_memory of this Cluster.


        :param total_memory: The total_memory of this Cluster.
        :type total_memory: int
        """

        self._total_memory = total_memory

    @property
    def location(self):
        """Gets the location of this Cluster.


        :return: The location of this Cluster.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this Cluster.


        :param location: The location of this Cluster.
        :type location: str
        """

        self._location = location

    @property
    def credentials(self):
        """Gets the credentials of this Cluster.


        :return: The credentials of this Cluster.
        :rtype: object
        """
        return self._credentials

    @credentials.setter
    def credentials(self, credentials):
        """Sets the credentials of this Cluster.


        :param credentials: The credentials of this Cluster.
        :type credentials: object
        """

        self._credentials = credentials

    @property
    def config(self):
        """Gets the config of this Cluster.


        :return: The config of this Cluster.
        :rtype: object
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this Cluster.


        :param config: The config of this Cluster.
        :type config: object
        """

        self._config = config

    @property
    def tags(self):
        """Gets the tags of this Cluster.


        :return: The tags of this Cluster.
        :rtype: object
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Cluster.


        :param tags: The tags of this Cluster.
        :type tags: object
        """

        self._tags = tags

    @property
    def created_by(self):
        """Gets the created_by of this Cluster.


        :return: The created_by of this Cluster.
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this Cluster.


        :param created_by: The created_by of this Cluster.
        :type created_by: str
        """

        self._created_by = created_by

    @property
    def owned_by(self):
        """Gets the owned_by of this Cluster.


        :return: The owned_by of this Cluster.
        :rtype: str
        """
        return self._owned_by

    @owned_by.setter
    def owned_by(self, owned_by):
        """Sets the owned_by of this Cluster.


        :param owned_by: The owned_by of this Cluster.
        :type owned_by: str
        """

        self._owned_by = owned_by

    @property
    def extra(self):
        """Gets the extra of this Cluster.


        :return: The extra of this Cluster.
        :rtype: object
        """
        return self._extra

    @extra.setter
    def extra(self, extra):
        """Sets the extra of this Cluster.


        :param extra: The extra of this Cluster.
        :type extra: object
        """

        self._extra = extra

    @property
    def external_id(self):
        """Gets the external_id of this Cluster.


        :return: The external_id of this Cluster.
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this Cluster.


        :param external_id: The external_id of this Cluster.
        :type external_id: str
        """

        self._external_id = external_id

    @property
    def owner(self):
        """Gets the owner of this Cluster.


        :return: The owner of this Cluster.
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this Cluster.


        :param owner: The owner of this Cluster.
        :type owner: str
        """

        self._owner = owner

    @property
    def state(self):
        """Gets the state of this Cluster.


        :return: The state of this Cluster.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Cluster.


        :param state: The state of this Cluster.
        :type state: str
        """

        self._state = state

    @property
    def last_seen(self):
        """Gets the last_seen of this Cluster.


        :return: The last_seen of this Cluster.
        :rtype: str
        """
        return self._last_seen

    @last_seen.setter
    def last_seen(self, last_seen):
        """Sets the last_seen of this Cluster.


        :param last_seen: The last_seen of this Cluster.
        :type last_seen: str
        """

        self._last_seen = last_seen

    @property
    def missing_since(self):
        """Gets the missing_since of this Cluster.


        :return: The missing_since of this Cluster.
        :rtype: str
        """
        return self._missing_since

    @missing_since.setter
    def missing_since(self, missing_since):
        """Sets the missing_since of this Cluster.


        :param missing_since: The missing_since of this Cluster.
        :type missing_since: str
        """

        self._missing_since = missing_since

    @property
    def created(self):
        """Gets the created of this Cluster.


        :return: The created of this Cluster.
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Cluster.


        :param created: The created of this Cluster.
        :type created: str
        """

        self._created = created
