# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from mist_api_v2.models.base_model_ import Model
from mist_api_v2 import util


class CreateSecret(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name=None, json=False):  # noqa: E501
        """CreateSecret - a model defined in OpenAPI

        :param name: The name of this CreateSecret.  # noqa: E501
        :type name: str
        :param json: The json of this CreateSecret.  # noqa: E501
        :type json: bool
        """
        self.openapi_types = {
            'name': str,
            'json': bool
        }

        self.attribute_map = {
            'name': 'name',
            'json': 'json'
        }

        self._name = name
        self._json = json

    @classmethod
    def from_dict(cls, dikt) -> 'CreateSecret':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Create_secret of this CreateSecret.  # noqa: E501
        :rtype: CreateSecret
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this CreateSecret.

        The full path of the secret  # noqa: E501

        :return: The name of this CreateSecret.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateSecret.

        The full path of the secret  # noqa: E501

        :param name: The name of this CreateSecret.
        :type name: str
        """

        self._name = name

    @property
    def json(self):
        """Gets the json of this CreateSecret.


        :return: The json of this CreateSecret.
        :rtype: bool
        """
        return self._json

    @json.setter
    def json(self, json):
        """Sets the json of this CreateSecret.


        :param json: The json of this CreateSecret.
        :type json: bool
        """
        allowed_values = [false, true]  # noqa: E501
        if json not in allowed_values:
            raise ValueError(
                "Invalid value for `json` ({0}), must be one of {1}"
                .format(json, allowed_values)
            )

        self._json = json
