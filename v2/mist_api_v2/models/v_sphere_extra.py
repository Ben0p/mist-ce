# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from mist_api_v2.models.base_model_ import Model
from mist_api_v2 import util


class VSphereExtra(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, folder=None, datastore=None):  # noqa: E501
        """VSphereExtra - a model defined in OpenAPI

        :param folder: The folder of this VSphereExtra.  # noqa: E501
        :type folder: str
        :param datastore: The datastore of this VSphereExtra.  # noqa: E501
        :type datastore: str
        """
        self.openapi_types = {
            'folder': str,
            'datastore': str
        }

        self.attribute_map = {
            'folder': 'folder',
            'datastore': 'datastore'
        }

        self._folder = folder
        self._datastore = datastore

    @classmethod
    def from_dict(cls, dikt) -> 'VSphereExtra':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The VSphereExtra of this VSphereExtra.  # noqa: E501
        :rtype: VSphereExtra
        """
        return util.deserialize_model(dikt, cls)

    @property
    def folder(self):
        """Gets the folder of this VSphereExtra.

        Name or ID of the Vsphere folder to place the machine into. Required for Vsphere 6.7  # noqa: E501

        :return: The folder of this VSphereExtra.
        :rtype: str
        """
        return self._folder

    @folder.setter
    def folder(self, folder):
        """Sets the folder of this VSphereExtra.

        Name or ID of the Vsphere folder to place the machine into. Required for Vsphere 6.7  # noqa: E501

        :param folder: The folder of this VSphereExtra.
        :type folder: str
        """

        self._folder = folder

    @property
    def datastore(self):
        """Gets the datastore of this VSphereExtra.

        Name or ID of a VSphere datastore  # noqa: E501

        :return: The datastore of this VSphereExtra.
        :rtype: str
        """
        return self._datastore

    @datastore.setter
    def datastore(self, datastore):
        """Sets the datastore of this VSphereExtra.

        Name or ID of a VSphere datastore  # noqa: E501

        :param datastore: The datastore of this VSphereExtra.
        :type datastore: str
        """

        self._datastore = datastore
