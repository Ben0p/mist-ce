<div id="actions-list">
    <ul class="actions" >
        <li id="create" class="enabled"><a rel="#wizard">Create</a></li>
        <li id="start"><a>Start</a></li>
        <li id="stop"><a>Stop</a></li>
        <li id="reboot"><a>Reboot</a></li>
        <li id="reboot-confirm" class="inner-shadow"><a>Sure?</a></li>
        <li id="destroy"><a>Destroy</a></li>
        <li id="destroy-confirm" class="inner-shadow"><a>Sure?</a></li>
        <li id="shell"><a>Console</a></li>
    </ul>
</div>
<ul id="button-header">
    <li class="head-button visible-in-list select-widget">
        <span class="check"></span>
        <ul class="sub-menu rounded-right-bottom drop-shadow">
            <li id="button-select-all">All</li>
            <li id="button-deselect-all">None</li>
        </ul>
    </li>
    <li class="head-button backend-button backend-template"></li>
    <li id="selected-nodes-button" class="head-button visible-in-list"><span id="selected-machines">0</span> / <span id="all-machines">0</span></li>
    <li id="button-back" class="head-button visible-in-details">Back</li>
</ul>
<div id="machines-list">
    <div class="node-template">
        <a><span class="select" id="chk-node.id">
            <span class="check"></span>
        </span></a>
        <span class="backend"></span>
        <span class="name"></span>
        <span class="state"></span>
        <span class="ip"></span>
    </div>
</div>

<div id="machine-details">
    <ul class="basic-info">
        <li class="name"></li>
        <li class="state"></li>
        <li class="backend"></li>
        <li class="image"></li>
        <li class="size"></li>
        <li class="id"></li>
        <li class="ip"></li>
    </ul>
    <ul class="extra-info"></ul>
</div>

    <div id="logo-container"></div>

<div id="console">
    <iframe onload="this.contentWindow.focus()" />
</div>
<!-- the form -->
<form action="#">
    <div class="overlay drop-shadow rounded" id="wizard">
        <h3 class="rounded-top">
            Create new Virtual Machine
        </h3>
        <ul>
             <!-- backend -->
            <li class="required border-bottom">
                <label>
                    <strong>0.</strong> Select provider <br />
                    <select name="backend" class="backend">
                        <option value="">-- please select --</option>
                        <script>
                        for (var m in backends) {
                            $('select.backend').append($('<option value="' + backends[m].id + '">' + backends[m].title + '</option>'));
                        }
                        </script>
                    </select>
                </label>
            </li>
            <!-- instance name -->
            <li class="required border-bottom">
                <label>
                    <strong>1.</strong> Instance name <em>e.g. My mail server.</em>
                    <br />
                    <input type="text" class="text" name="instance_name" />
                </label>
            </li>
            <!-- image -->
            <li class="required border-bottom">
                <label>
                    <strong>2.</strong> Select an image <br />
                    <select name="instance_image" class="images">
                        <option value="">-- please select --</option>
                    </select>
                </label>
            </li>
            <!-- size -->
            <li class="required border-bottom">
                <label>
                    <strong>3.</strong> Select VM size<br />
                    <select name="instance_size" class="sizes">
                        <option value="">-- please select --</option>
                        <!--option tal:repeat="size sizes" tal:attributes="id size.id" tal:content="size.name">small</option-->
                    </select>
                </label>
            </li>
            <!-- location -->
            <li class="required border-bottom">
                <label>
                    <strong>4.</strong> Select VM location<br />
                    <select name="instance_location" class="locations">
                        <option value="">-- please select --</option>
                    </select>
                </label>
            </li>
            <li class="clearfix rounded-bottom">
                 <button type="button" class="start right">Start VM</button>
            </li>

        </ul>
    </div>
</form>

<script>

var NODE_NAME_CHARACTERS = 35;
/*
libcloud listing of state codes
    RUNNING = 0
    REBOOTING = 1
    TERMINATED = 2
    PENDING = 3
    UNKNOWN = 4
*/


var STATES = {
    '0' : 'Running',
    '1' : 'Rebooting',
    '2' : 'Terminated',
    '3' : 'Pending',
    '4' : 'Unknown',            
    };

// create vm overlay
$(function() {
    $(".enabled#create a[rel]").overlay({
        top: 'center',
        mask: {
            color: '#000',
            opacity: '.4'
        }
    });
});

// intercept create wizard
$(".enabled#create").click(function(){
    $('li#create').addClass('pressed');
});

$("select.backend").live('click', function(e){
    var sizesHtml = '', imagesHtml='', locationsHtml = '';
    var sizesLabel = $('select.sizes').parent();
    var imagesLabel = $('select.images').parent();
    var locationsLabel = $('select.locations').parent();
    var i = $(this)[0].selectedIndex - 1;

    $('select.sizes').remove();
    $('select.images').remove();
    $('select.locations').remove();
    if ( i > -1) {
        $.each(backends[i].sizes, function(val, text) {
            sizesHtml += '<option value="' + backends[i].sizes[val].id + '">' + backends[i].sizes[val].name + '</option>';
        });
        $.each(backends[i].images, function(val, text) {
            imagesHtml += '<option value="' + backends[i].images[val].id + '">' + backends[i].images[val].name + '</option>';
        });
        $.each(backends[i].locations, function(val, text) {
            locationsHtml += '<option value="' + backends[i].locations[val].id + '">' + backends[i].locations[val].name + '</option>';
        });
    }
    sizesHtml = '<select name="instance_size" class="sizes"><option value=""><b>-- please select --</b></option>' + sizesHtml + '</select>';
    imagesHtml = '<select name="instance_image" class="images"><option value="">-- please select --</option>' + imagesHtml + '</select>';
    locationsHtml = '<select name="instance_location" class="locations"><option value="">-- please select --</option>' + locationsHtml + '</select>';
    sizesLabel.append(sizesHtml);
    imagesLabel.append(imagesHtml);
    locationsLabel.append(locationsHtml);
});

// overlay logic
//intercept start VM click
$(function() {
    // validation logic is done inside the onBeforeSeek callback
    $('.start').click(function() {
        inputs = $('#wizard').find(".required :input").removeClass("error"),
        empty = inputs.filter(function() {
           return $(this).val().replace(/\s*/g, '') == '';
        });
         // if there are empty fields, then
        if (empty.length) {
            // add a CSS class name "error" for empty & required fields
            empty.addClass("error");
            // cancel seeking of the scrollable by returning false
            return false;
        } else {    // everything is good
            var machineName = $('input[name=instance_name]')[0].value;
            var size = $('select[name=instance_size]')[0].value;
            var image = $('select[name=instance_image]')[0].value;
            var location = $('select[name=instance_location]')[0].value;
            var backend_provider = $("select.backend")[0].selectedIndex -1;
            backends[backend_provider].newAction(['create', machineName, size, image, location]); //send data for the start action        
            //FIXME: show message to user regarding their node, close wizard and clear values
            $(".enabled#create a[rel]").overlay().close(); 
        }
    });

    $('.cancel').click(function() {
        $(".enabled#create a[rel]").overlay().close();
    });

    $(document).delegate('#exposeMask, .close', 'click', function() {
        $('li#create').removeClass('pressed');
    });
});

// Clicking on node brings up the details pane
$('.node').live('click', function() {
    // populate basic info
    /*
    The way and order of doing this is very important, because update_actions()
    depends on machine and backend id values put in DOM by the next steps.
    The idea is that we put them first in DOM and then call update_actions().
    */
    var backend_id = $(this).find('.backend').text();
    var machine_id = $(this)[0].id;
    $('#machine-details li.name').text($(this).find('.name').text());
    $('#machine-details li.state').text($(this).find('.state').text());
    $('#machine-details li.backend').text(backend_id);
    $('#machine-details li.id').text(machine_id);
    $('#machine-details li.ip').text('Ip: ' + $(this).find('.ip').text());
    // populate the extra info of the machine, each provider offers different ones
    // delete entries placed there earlier
    $('#machine-details .extra-info li').remove();
    var machine = get_machine(backend_id, machine_id);

    var machine_size = get_size(backend_id, machine);
    var machine_image = get_image(backend_id, machine);
    //show machine size and image if we have them. otherwise can't be shown
    if (machine_size) {
        $('#machine-details li.size').text('Machine size id:' + machine_size);
        $('#machine-details li.size').append('bandwidth:' + machine_size.bandwidth);
        $('#machine-details li.size').append('disk:' + machine_size.disk);
        $('#machine-details li.size').append('driver:' + machine_size.driver);
        $('#machine-details li.size').append('name:' + machine_size.name);
        $('#machine-details li.size').append('price:' + machine_size.price);
        $('#machine-details li.size').append('ram:' + machine_size.ram);
    };
    if (machine_image) {
        $('#machine-details li.image').text('Machine image id:' + machine_image.id);
        $('#machine-details li.image').append(' image data:' + machine_image.extra);
    }
    var extra = machine.extra;
    for (var key in extra) {
        var entry = '<li class="'+ key +'">' + key + ': ' +extra[key] + '</li>';
        $('#machine-details .extra-info').append(entry.toString());
    }
    $('#machines-list').fadeOut(200, function() {
        $('#machine-details').fadeIn(200, update_actions);
    });
    $('.head-button:not(.visible-in-details)').fadeOut(0, function() {
        $('.visible-in-details').fadeIn(200);
    });
    return false;
});

//
// Clicking on back button brings up the list again
$('#button-back').live('click', function() {
    $('#machine-details, #console').fadeOut(200, function() {
        $('#machines-list').fadeIn(200, update_actions);
    });
    $('.head-button:not(.visible-in-list)').fadeOut(0, function() {
        $('.visible-in-list').fadeIn(200);
    });
    return false;
});

// Clicking on a backend button
$('.backend-button').live('click', function(){
    // Determine the backend index
    b = $(".backend-button:visible").index($(this));

    if ($(this).hasClass('on') || $(this).hasClass('wait')){
        var ids = "";
        for (m in backends[b].machines) {
            if (ids.length > 0)
                ids += ", ";
            ids += "#" + b + '-' + backends[b].machines[m].id;
        }
        if ($(ids).filter('.selected').length == $(ids).length) {
            $(ids).removeClass('selected');
        } else {
            $(ids).addClass('selected');
        }
        update_actions();
    } else {
        // If backend is offline try to get it back online
        backends[b].clearQueue();
        backends[b].newAction(['list_machines']);
        backends[b].processAction();
    }

});

// select all option
$('#button-select-all').click(function() {
    $('.node').addClass('selected');
    $('#button-header .check').parent().addClass('selected');
    $('#button-header .check').parent().removeClass('partial');
    update_actions();
    return false;
});

// deselect all option
$('#button-deselect-all').click(function() {
    $('.node').removeClass('selected');
    $('#button-header .check').parent().removeClass('selected');
    $('#button-header .check').parent().removeClass('partial');
    update_actions();
    return false;
});

// node checkbox click updates the header checkbox and the actions
$('.node a').live('click', function() {
    $(this).parent().toggleClass('selected');
    update_actions();
    return false;
});

// header checkbox click toggles between select all/non
$('#button-header .check').click(function() {
    if ($('.node.selected .check').length == $('.node .check').length) {
        $('.node').removeClass('selected');
        $(this).parent().removeClass('selected');
        $(this).parent().removeClass('partial');

    } else {
        $(this).parent().addClass('selected');
        $(this).parent().removeClass('partial');
        $('.node').addClass('selected');
    }
    update_actions();
    return false;
});


function update_actions() {

    var action_map = [ ['stop', 'destroy', 'reboot', 'shell'],  // RUNNING
                       ['destroy'],                             // REBOOTING
                       ['start', 'destroy'],                    // TERMINATED
                       ['destroy', 'reboot', 'shell'],          // PENDING
                       ['destroy', 'reboot', 'shell']           // UNKOWN
                     ];
    var enabled_actions = ['start', 'stop', 'destroy', 'reboot', 'shell' ];
    var selected_states = [];

    update_selected_machines_count();

    if ($('.node.selected .check').length == $('.node .check').length){
        $('#button-header .check').parent().addClass('selected');
        $('#button-header .check').parent().removeClass('partial');
    } else if ($('.node.selected .check').length == 0) {
        $('#button-header .check').parent().removeClass('selected');
        $('#button-header .check').parent().removeClass('partial');
    } else {
        $('#button-header .check').parent().addClass('partial');
        $('#button-header .check').parent().removeClass('selected');
    }
    
    $('#actions-list ul li').removeClass('enabled');

    if ($('#machines-list:visible').length == 0){
        //single machine view
        var machine = get_machine($('#machine-details .backend').text(), $('#machine-details .id').text());
        for (var action in action_map[machine.state]){
            $('#actions-list #'+action_map[machine.state][action]).addClass('enabled');
        }
    } else {
        //list view
        if ($('.node.selected .check').length == 0){
            // only enable create when no machines are selected
            $('#actions-list #create').addClass('enabled');
            return;
        }

        $('.node.selected').each(function(){
            selected_states.push(get_machine($(this).find('.backend').text(), $(this)[0].id).state);
        });

        for (stateIndex in selected_states){
            for (actionIndex in enabled_actions){
                 if (action_map[selected_states[stateIndex]].indexOf(enabled_actions[actionIndex]) < 0){
                    enabled_actions.splice(actionIndex,1);
                }
            }
        }

        for (var action in enabled_actions){
            $('#actions-list #' + enabled_actions[action]).addClass('enabled');
        }

        if ($('.node.selected .check').length > 1){
            //disable console when multiple machines are selected
            $('#actions-list #shell').removeClass('enabled');
        }
    }

}

//Show all messages
$('#notifier span.messages-expand').click(function() {
    $('#notifier-in').slideToggle('slow', function() {
    var messagesHtml = '';
        for (var i = log.messages.length -1; i > -1; i--) {
            messagesHtml += log.messages[i] + '<br>';
        }
        $('#notifier-in .messages').html(messagesHtml);       
    });
});


// reboot action click
$('#actions-list ul.actions li#reboot').click(function() {
    if ($(this).hasClass('enabled')) {
        $('#actions-list ul.actions li#reboot-confirm').slideDown(120);    
        $(this).addClass('pressed');
    }
});

// reboot confirm action click
$('#actions-list ul.actions li#reboot-confirm').click(function() {
    if ($('#machines-list:visible').length == 0) { //single machine view
        var backend = backends[$('#machine-details li.backend').text()];
        backend.newAction(['reboot',$('#machine-details li.id').text().replace(backends.indexOf(backend) + '-', '')]);
     } else {
        //for machine in selected:
        $('#machines-list .node.selected .check').each(function() {
            var node = $(this).closest('.node.selected');
            var backend = backends[node.children('span.backend').text()];
            backend.newAction(['reboot', node[0].id.replace(backends.indexOf(backend) + '-', '')]);
        });
    }    
});
    
$('#actions-list ul.actions li#destroy').click(function() {
    if ($(this).hasClass('enabled')) {    
        $('#actions-list ul.actions li#destroy-confirm').slideDown(120);
        $(this).addClass('pressed');
    }
});

// destroy confirm action click
$('#actions-list ul.actions li#destroy-confirm').click(function() {
    var destroy = $('#actions-list ul.actions li#destroy');
     if ($('#machines-list:visible').length == 0) { //single machine view
        var backend = backends[$('#machine-details li.backend').text()];
        backend.newAction(['destroy',$('#machine-details li.id').text().replace(backends.indexOf(backend) + '-', '')]);
     } else {
         //for machine in selected:
         $('#machines-list .node.selected .check').each(function() {
            var node = $(this).closest('.node.selected');
            var backend = backends[node.children('span.backend').text()];
            backend.newAction(['destroy', node[0].id.replace(backends.indexOf(backend) + '-', '')]);
         });
     }
    $(this).slideUp(120);
    destroy.removeClass('pressed');
});


// Set a timeout to slide the confirmation up
// after leaving either the destroy or
// destroy-confirm
$('#actions-list ul.actions li#reboot')
.add('#actions-list ul.actions li#reboot-confirm')
.mouseleave(function() {
    var destroy = $('#actions-list ul.actions li#reboot');
    var confirm = $('#actions-list ul.actions li#reboot-confirm');
    confirm.data("slideup", setTimeout(function() {
        confirm.slideUp(120);
        destroy.removeClass('pressed');
    },
    400));
});

// Cancel the slideup timeout if entering either reboot
// or reboot-confirm elements.
$('#actions-list ul.actions li#reboot-confirm')
.add('#actions-list ul.actions li#reboot')
.mouseenter(function() {
    var confirm = $('#actions-list ul.actions li#reboot-confirm');
    clearTimeout(confirm.data("slideup"));
})

// Set a timeout to slide the confirmation up
// after leaving either the destroy or
// destroy-confirm
$('#actions-list ul.actions li#destroy')
.add('#actions-list ul.actions li#destroy-confirm')
.mouseleave(function() {
    var destroy = $('#actions-list ul.actions li#destroy');
    var confirm = $('#actions-list ul.actions li#destroy-confirm');
    confirm.data("slideup", setTimeout(function() {
        confirm.slideUp(120);
        destroy.removeClass('pressed');
    },
    400));
});

// Cancel the slideup timeout if entering either destroy
// or destroy-confirm elements.
$('#actions-list ul.actions li#destroy-confirm')
.add('#actions-list ul.actions li#destroy')
.mouseenter(function() {
    var confirm = $('#actions-list ul.actions li#destroy-confirm');
    clearTimeout(confirm.data("slideup"));
})

// stop action click
$('#actions-list ul.actions li#stop').click(function() {
     if ($('#machines-list:visible').length == 0) { //single machine view
        var backend = backends[$('#machine-details li.backend').text()];
        backend.newAction(['stop',$('#machine-details li.id').text().replace(backends.indexOf(backend) + '-', '')]);
     } else {
         //for machine in selected:
         $('#machines-list .node.selected .check').each(function() {
            var node = $(this).closest('.node.selected');
            var backend = backends[node.children('span.backend').text()];
            backend.newAction(['stop', node[0].id.replace(backends.indexOf(backend) + '-', '')]);
         });
     }
});

// console action click
$('#actions-list ul.actions li#shell').click(function() {
    if ($('#machines-list:visible').length == 0){
        //single machine view

    } else {
        // list view
        $("#machines-list").fadeOut(200, function(){
            $('#console iframe')[0].src="https://" + $('#machines-list .node.selected:first .ip').text();
            $('#console').fadeIn(200);
            $('.head-button:not(.visible-in-details)').fadeOut(200, function() {
                $('.visible-in-details').fadeIn(200);
            });
        });
    }
});

// header button click
$("ul#button-header li").click(function() {

    var $this = $(this);
    if ($this.children('span.check').length) {
        $this.addClass('active');
        //Following events are applied to the subnav itself (moving subnav up and down)
        $this.find("ul.sub-menu").slideDown(200).show(); //Drop down the subnav on click
    }
    //Following events are applied to the trigger (Hover events for the trigger)
}).mouseenter(function() {
    var $this = $(this);
    if ($this.children('span.check').length) {
        //$this.addClass('active'); //On hover over, add class "active"
    }
}).mouseleave(function() {
    var $this = $(this);
    if ($this.children('span.check').length) {
        $this.find("ul.sub-menu").slideUp(200, function(){ $this.removeClass('active')});
    }
});

// basic actions for getting all necessary data
$(document).ready(function(){
    $('#machine-details').hide();
    $('.head-button:not(.visible-in-list)').hide();
    //Only shows drop down trigger when js is enabled
    //(Adds empty span tag after ul.subnav*)
    $("ul.sub-menu").parent().append("<span></span>");

    var buttonsAmount = backends.length;

    backends.forEach(function(b, i){
        button =  $('.backend-template').clone();
        button.addClass('visible-in-list');
        // Providers buttons grouping logic
        if (buttonsAmount > 1) {
            // Should be opposite because of right float
            if (!i) {
                button.addClass('left');
            } else if (i == buttonsAmount - 1) {
                button.addClass('right').addClass('end');
            } else {
                button.addClass('mid');
            }
        }
        button.addClass('provider'+b.provider);
        button.appendTo('#button-header');
        //button.text(b.title);
        button.fadeIn(200);
        button.removeClass('backend-template');
        b.newAction(['list_machines']);
    });

    //after getting the machines, get images and sizes
    backends.forEach(function(b, i){
        b.newAction(['list_sizes']);
        b.newAction(['list_images']);
        b.newAction(['list_locations']);
    });
});

function update_machines_view(backend){
    $('#logo-container').animate({opacity : 0.05});
    backend.machines.forEach(function(machine, index){
        var node = $('#machines-list > #' + backends.indexOf(backend) + '-' + machine.id);
        if (node.length == 1) { // there should be only one machine with this id in the DOM 
            if (node.find('.name').text() != machine.name ||
                node.find('.ip').text() != machine.public_ips[0]
                ){
                node.fadeOut(100);
                node.find('.name').text(truncate_names(machine.name, NODE_NAME_CHARACTERS));
                node.find('.backend').text(backends.indexOf(backend));
                node.find('.backend').addClass('provider'+backend.provider);
                var primary_ip = machine.public_ips[0] || machine.private_ips[0] || "";
                var all_ips = machine.public_ips.concat(machine.private_ips);
                if (all_ips.length > 1) {
                    all_ips = " <span class='more'>&hellip;</span><span class='all-ips'>" + all_ips.join(' - ') + "</span>";
                } else {
                    all_ips = "<span class='more'></span><span class='all-ips'>" + primary_ip + "</span>";
                }
                node.find('.ip').html("<span class='primary'>"+primary_ip+"</span>"+all_ips);
                node.find('.select')[0].id = 'chk-' + machine.id;
                node.fadeIn(100);
            }
            node.find('.state').removeClass().addClass('state').addClass('state'+machine.state);
        } else { // if the machine does does exist in the DOM, then add it 
            if (node.length != 0){
                console.log(node);
            }
            node = $('.node-template').clone();
            node.removeClass('node-template');
            node.addClass('node');
            node.appendTo('#machines-list');
            node.find('.name').text(truncate_names(machine.name, NODE_NAME_CHARACTERS));
            node.find('.backend').text(backends.indexOf(backend));
            node.find('.backend').addClass('provider'+backend.provider);
            var primary_ip = machine.public_ips[0] || machine.private_ips[0] || "";
            var all_ips = machine.public_ips.concat(machine.private_ips);
            if (all_ips.length > 1) {
                all_ips = " <span class='more'>&hellip;</span><span class='all-ips'>" + all_ips.join(' - ') + "</span>";
            } else {
                all_ips = "<span class='more'></span><span class='all-ips'>" + primary_ip + "</span>";
            }
            node.find('.ip').html("<span class='primary'>"+primary_ip+"</span>"+all_ips);
            node.find('.state').addClass('state'+machine.state);
            node.find('.state').attr('title', STATES[machine.state]);
            node.find('.select')[0].id = 'chk-' + machine.id;
            node[0].id = backends.indexOf(backend) + '-' + machine.id;
            node.fadeIn(200);
        }
    });

    //Make a list of all machine ids first, from all backends and check if machine
    //is in DOM but not in list, then delete it from DOM. Example id: 2-18
    var machines_list = [];
    for (var i = 0 ; i < backends.length; i++) {
        for (var m in backends[i].machines) {
            machines_list.push(i + '-' + backends[i].machines[m].id);
        }
    }

    $('#machines-list').find('.node').each(function (i) { 
        if ($.inArray(this.id, machines_list) == -1) {
            $('#' + this.id).remove();
        }
    });      
    update_machines_count();
}

function truncate_names(truncateName, truncateCharacters ) { //truncate truncateName if bigger than truncateCharacters
    if (truncateName.length > truncateCharacters) {
        return truncateName.substring(0, NODE_NAME_CHARACTERS) + '...';
    } else {
        return truncateName;
    }
}

function update_backend_status(backend, action) {
    var button = $('.backend-button.provider'+backend.provider);
    if (backend.status == 'wait'){
        button.removeClass('on');
        button.addClass('wait');
        button.attr('title', action);
    } else if (backend.status =='on'){
        button.addClass('on');
        button.removeClass('wait');
        button.attr('title', backend.title);
    } else {
        button.removeClass('on');
        button.removeClass('wait');
        button.attr('title','click to retry connection');
    }

    if (typeof(action) == 'string'){
        $('.actions #'+action).removeClass('pressed');
    }
}

//updates the messages notifier
function update_message_notifier() {
    if (log.messages[log.messages.length-1][0] < LOGLEVEL){
        var txt = log.messages[log.messages.length-1][1].toISOString() + " : " + log.messages[log.messages.length-1].slice(2).join(' - ');
        $('#notifier span.text').text(txt);
        update_messages_count();
    }
}

// update the messages counter
function update_messages_count() {
    var message_count = log.messages.filter(function(el,i){return el[0] < LOGLEVEL}).length;
    if (message_count == 1) {
        messages = ' message';
    } else {
        messages =  ' messages';
    }
    $('#notifier span.messages-count').text(message_count + messages);
}

// update the machines counter
function update_machines_count() {
    var allMachines = 0;
    for (var i = 0 ; i < backends.length; i++) {
        allMachines += backends[i].machines.length;
    }

    $('#all-machines').text(allMachines);
}

// update the selected machines counter
function update_selected_machines_count() {
    $('#selected-machines').text($('#machines-list .selected').length+"");
}

//get machine, given backend and machineId
function get_machine(backendIndex, machineId) {
    //machineId is backendIndex-machineId, eg 2-28
    machine_id = machineId.replace(backendIndex + '-', '');
    for (var m in backends[backendIndex].machines){
        if (backends[backendIndex].machines[m].id == machine_id) {
            return backends[backendIndex].machines[m];
        }
    }
}

//get image, given backend and machine
function get_image(backendIndex, machine) {
    for (var m in backends[backendIndex].images){
        if (backends[backendIndex].images[m].id == machine.extra.imageId) {
            return backends[backendIndex].images[m];
        }
    }
}

//get size, given backend and machine
function get_size(backendIndex, machine) {
    for (var m in backends[backendIndex].sizes){
        if (backends[backendIndex].sizes[m].id == machine.extra.flavorId) {
            return backends[backendIndex].sizes[m];
        }
    }
}

// polling
function refresh_machines(backend){
    var i = backends.indexOf(backend);
    setTimeout("backends[" + i + "].newAction(['list_machines'])", backend.interval);
}
</script>
