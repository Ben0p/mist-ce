<div id="actions-list">
    <ul class="actions" >
        <li id="create" class="enabled"><a rel="#wizard">Create</a></li>
        <li id="start"><a>Start</a></li>
        <li id="stop"><a>Stop</a></li>
        <li id="reboot"><a>Reboot</a></li>
        <li id="destroy"><a>Destroy</a></li>
        <li id="shell"><a>Console</a></li>
    </ul>
</div>
<ul id="button-header">
    <li class="head-button visible-in-list select-widget">
        <span class="check"></span>
        <ul class="sub-menu rounded-right-bottom">
            <li id="button-select-all">All</li>
            <li id="button-deselect-all">None</li>
        </ul>
    </li>
	<li id="selected-nodes-button" class="head-button visible-in-list">0 / 0</li>
    <li class="head-button backend-button backend-template"></li>
    <li id="button-back" class="head-button visible-in-details">Back</li>
</ul>
<div id="machines-list">
    <div class="node-template">
        <a><span class="select" id="chk-node.id">
            <span class="check"></span>
        </span></a>
        <span class="backend"></span>
        <span class="name"></span>
        <span class="state"></span>
        <span class="ip"></span>
        <ul class="extra"></ul>
    </div>
</div>

<div id="machine-details">
    <ul>
        <li class="name"></li>
        <li class="state"></li>
        <li class="backend"></li>
        <li class="id"></li>
        <li class="ip"></li>
    </ul>
    <ul class="extra"></ul>
</div>

<div id="console">
    <iframe onload="this.contentWindow.focus()" />
</div>
<!-- the form -->
<form action="#">
    <div class="overlay" id="wizard">
        <h2>
            <strong>Create a new Virtual Machine</strong>
        </h2>
        <ul>
            <!-- instance name -->
            <li class="required">
                <label>
                    <strong>1.</strong> Instance name <em>e.g. My mail server.</em>
                    <br />
                    <input type="text" class="text" name="instance_name" />
                </label>
            </li>
            <!-- image -->
            <li class="required">
                <label>
                    <strong>2.</strong> Select an image <br />
                    <select name="image">
                        <option value="">-- please select --</option>
                        <!--option tal:repeat="image images" tal:attributes="id image.id" tal:content="image.name">Ubuntu 10.04 x86_64 server</option-->
                    </select>
                </label>
            </li>
            <!-- size -->
            <li class="required">
                <label>
                    <strong>3.</strong> Select VM size<br />
                    <select name="size">
                        <option value="">-- please select --</option>
                        <!--option tal:repeat="size sizes" tal:attributes="id size.id" tal:content="size.name">small</option-->
                    </select>
                </label>
            </li>
            <li class="clearfix">
                 <button type="button" class="start right">Start VM</button>
            </li>

        </ul>
    </div>
</form>

<script>

// create vm overlay
$(function() {
    $(".enabled#create a[rel]").overlay({
            top: 'center',
            mask: {
                color: '#000',
                opacity: '.4'
            },
            effect: 'apple'
        });
    });

// overlay logic
$(function() {
    // validation logic is done inside the onBeforeSeek callback
    $('.start').click(function() {
        inputs = $('#wizard').find(".required :input").removeClass("error"),
        empty = inputs.filter(function() {
           return $(this).val().replace(/\s*/g, '') == '';
        });
         // if there are empty fields, then
        if (empty.length) {
            // add a CSS class name "error" for empty & required fields
            empty.addClass("error");
            // cancel seeking of the scrollable by returning false
            return false;
        } else {    // everything is good
            alert('ok');
        }
    });

    $('.cancel').click(function() {
        $(".enabled#create a[rel]").overlay().close();
    });

});

// Clicking on node brings up the details pane
$('.node').live('click', function() {
    $('#machines-list').fadeOut(200, function() {
        $('#machine-details').fadeIn(200, update_actions);
    });
    $('.head-button:not(.visible-in-details)').fadeOut(200, function() {
        $('.visible-in-details').fadeIn(200);
    });
    $('#machine-details li.name').text($(this).find('.name').text());
    $('#machine-details li.state').text($(this).find('.state').text());
    $('#machine-details li.backend').text($(this).find('.backend').text());
    $('#machine-details li.id').text($(this)[0].id);
    $('#machine-details li.ip').text($(this).find('.ip').text());
    $('#machine-details ul.extra').append($(this).find('ul.extra li'));
    return false;
});

// Clicking on back button brings up the list again
$('#button-back').click(function() {
    $('#machine-details, #console').fadeOut(200, function() {
        $('#machines-list').fadeIn(200, update_actions);
    });
    $('.head-button:not(.visible-in-list)').fadeOut(200, function() {
        $('.visible-in-list').fadeIn(200);
    });
    return false;
});

// select all option
$('#button-select-all').click(function() {
    $('.node').addClass('selected');
    $('#button-header .check').parent().addClass('selected');
    $('#button-header .check').parent().removeClass('partial');
    update_actions();
    return false;
});

// deselect all option
$('#button-deselect-all').click(function() {
    $('.node').removeClass('selected');
    $('#button-header .check').parent().removeClass('selected');
    $('#button-header .check').parent().removeClass('partial');
    update_actions();
    return false;
});

// node checkbox click updates the header checkbox and the actions
$('.node a').live('click', function() {
    $(this).parent().toggleClass('selected');
    if ($('.node.selected .check').length == $('.node .check').length){
        $('#button-header .check').parent().addClass('selected');
        $('#button-header .check').parent().removeClass('partial');
    } else if ($('.node.selected .check').length == 0) {
        $('#button-header .check').parent().removeClass('selected');
        $('#button-header .check').parent().removeClass('partial');
    } else {
        $('#button-header .check').parent().addClass('partial');
        $('#button-header .check').parent().removeClass('selected');
    }
    update_actions();
    return false;
});

// header checkbox click toggles between select all/non
$('#button-header .check').click(function() {
    if ($('.node.selected .check').length == $('.node .check').length) {
        $('.node').removeClass('selected');
        $(this).parent().removeClass('selected');
        $(this).parent().removeClass('partial');

    } else {
        $(this).parent().addClass('selected');
        $(this).parent().removeClass('partial');
        $('.node').addClass('selected');
    }
    update_actions();
    return false;
});

// update the action list, enabling or disabling respective actions
//action codes on libcloud:
//    RUNNING = 0
//    REBOOTING = 1
//    TERMINATED = 2
//    PENDING = 3
//    UNKNOWN = 4



function update_actions() {
    var RUNNING = 0, REBOOTING = 1, TERMINATED = 2, PENDING = 3, UNKNOWN = 4;
    var action_map = [ ['stop','destroy','reboot','shell'], // RUNNING
                       ['destroy'], // REBOOTING
                       ['start', 'destroy'], // TERMINATED
                       ['destroy', 'reboot', 'shell'], //PENDING
                       ['destroy', 'reboot', 'shell'] //UNKOWN
                     ];
    var actions = ['start', 'stop', 'reboot', 'destroy', 'shell'];
    
    $('#actions-list ul li').removeClass('enabled');
    
    if ($('#machines-list:visible').length == 0){ //single machine view
        var machine = get_machine($('#machine-details .backend').text(), $('#machine-details .id').text());           
        for (var action in action_map[machine.state]){
            $('#actions-list #'+action_map[machine.state][action]).addClass('enabled');
        }
    } else if ($('.node.selected .check').length == 0){
        $('#actions-list #create').addClass('enabled');
        $('#actions-list #destroy').removeClass('enabled');
        $('#actions-list #reboot').removeClass('enabled');
        $('#actions-list #shell').removeClass('enabled');
    } else if ($('.node.selected .check').length == 1){ //list machines view
        $('#actions-list #create').removeClass('enabled');
        $('#actions-list #destroy').addClass('enabled');
        $('#actions-list #reboot').addClass('enabled');
        $('#actions-list #stop').addClass('enabled');
        $('#actions-list #shell').addClass('enabled');
    } else {
        $('#actions-list #create').removeClass('enabled');
        $('#actions-list #destroy').addClass('enabled');
        $('#actions-list #reboot').addClass('enabled');
        $('#actions-list #shell').removeClass('enabled');
    }
}

// reboot action click
$('#actions-list ul.actions li#reboot').click(function() {
     if ($('#machines-list:visible').length == 0){ //single machine view
         var backend = backends[$('#machine-details span.backend').text()];
         backend.newAction(['reboot',$('#machine-details span.id').text()]);
     } else {
         //for machine in selected:
         $('#machines-list .node.selected .check').each(function(){
            var backend = backends[$(this).parent().parent().parent().children('span.backend').text()];
            backend.newAction(['reboot', $(this).parent().parent().parent()[0].id]);
         });
     }

});

// destroy action click
$('#actions-list ul.actions li#destroy').click(function() {
     if ($('#machines-list:visible').length == 0){ //single machine view
         var backend = backends[$('#machine-details span.backend').text()];
         backend.newAction(['destroy',$('#machine-details span.id').text()]);
     } else {
         //for machine in selected:
         $('#machines-list .node.selected .check').each(function(){
            var backend = backends[$(this).parent().parent().parent().children('span.backend').text()];
            backend.newAction(['destroy', $(this).parent().parent().parent()[0].id]);
         });
     }

});

// stop action click
$('#actions-list ul.actions li#stop').click(function() {
     if ($('#machines-list:visible').length == 0){ //single machine view
         var backend = backends[$('#machine-details span.backend').text()];
         backend.newAction(['stop',$('#machine-details span.id').text()]);
     } else {
         //for machine in selected:
         $('#machines-list .node.selected .check').each(function(){
            var backend = backends[$(this).parent().parent().parent().children('span.backend').text()];
            backend.newAction(['stop', $(this).parent().parent().parent()[0].id]);
         });
     }

});

// console action click
$('#actions-list ul.actions li#shell').click(function() {
    if ($('#machines-list:visible').length == 0){ //single machine view
        $("#machines-list").fadeOut(200, function(){
            $('#console iframe')[0].src="https://" + $('#machines-list .node.selected .ip').text();
            $('#console').fadeIn(200);
            $('.head-button:not(.visible-in-details)').fadeOut(200, function() {
                $('.visible-in-details').fadeIn(200);
            });
        });
    } else {
        // list view
    }
});

// header button click
$("ul#button-header li").click(function() {
    var $this = $(this);
    $this.addClass('active');
    //Following events are applied to the subnav itself (moving subnav up and down)
    $this.parent().find("ul.sub-menu").slideDown(200).show(); //Drop down the subnav on click

    $this.parent().hover(function() {
    }, function(){
        $this.parent().find("ul.sub-menu").slideUp(200, function(){ $this.removeClass('active')});
    });

    //Following events are applied to the trigger (Hover events for the trigger)
}).hover(function() {
    $this.addClass('active'); //On hover over, add class "subhover"
});


$(document).ready(function(){
    $('#machine-details').hide();
    $('.head-button:not(.visible-in-list)').hide();

    $("ul.sub-menu").parent().append("<span></span>"); //Only shows drop down trigger when js is enabled (Adds empty span tag after ul.subnav*)
	
	var buttonsAmount = backends.length;
	
    backends.forEach(function(b, i){
        button =  $('.backend-template').clone();
        button.addClass('visible-in-list');
		// Providers buttons grouping logic
		if (buttonsAmount > 1) {
			// Should be opposite because of right float
			if (!i) {
				button.addClass('right').addClass('end');
			} else if (i = buttonsAmount - 1) {
				button.addClass('left');
			} else {
				button.addClass('mid');
			}
		}
        button.addClass('provider'+b.provider);
        button.appendTo('#button-header');
        button.text(b.title);
        button.fadeIn(200);
        button.removeClass('backend-template');
        b.newAction(['list_machines']);
    });
});

function update_machines_view(backend){
    backend.machines.forEach(function(machine, index){
        node = $('.node-template').clone();
        node.removeClass('node-template');
        node.addClass('node');
        node.appendTo('#machines-list');
        node.find('.name').text(machine.name);
        node.find('.backend').text(backends.indexOf(backend));
        node.find('.backend').addClass('provider'+backend.provider);
        node.find('.ip').text(machine.public_ips[0]);
        node.find('.state').addClass('state'+machine.state);
        for (var key in machine.extra){
            node.find('ul.extra').append('<li>'+ key + ': ' + machine.extra[key] + '</li>');
        }
        //node.find('.extra').text(JSON.stringify(machine.extra));
        node.find('.select')[0].id = 'chk-' + machine.id;
        node[0].id = machine.id;
        node.fadeIn(200);
    });
}

function update_backend_status(backend) {
    var button = $('.provider'+backend.provider);
    if (backend.status == 'wait'){
        button.removeClass('on');
        button.addClass('wait');
    } else if (backend.status =='on'){
        button.addClass('on');
        button.removeClass('wait');
    } else {
        button.removeClass('on');
        button.removeClass('wait');
    }
}

function get_machine(backendIndex, machineId){
    for (var m in backends[backendIndex].machines){
        if (backends[backendIndex].machines[m].id == machineId) {
            return backends[backendIndex].machines[m];
        }
    }
}
</script>
